{"version":3,"sources":["styles/Login.module.css","styles/Cards.module.css","styles/App.module.css","styles/Pagination.module.css","styles/Button.module.css","styles/Header.module.css","styles/SelectingSidebar.module.css","styles/ErrorPage.module.css","styles/Input.module.css","styles/Table.module.css","styles/search.module.css","a1-main/m2-bll/actions/app-actions.ts","a1-main/m2-bll/actions/auth-actions.ts","a1-main/m2-bll/actions/password-actions.ts","enums/routes.ts","a1-main/m3-dal/instance.ts","a1-main/m3-dal/auth-api.ts","a1-main/m1-ui/components/common/ErrorAll.tsx","assets/images/preloader.svg","a1-main/m1-ui/components/common/Spinner.tsx","a1-main/m1-ui/components/common/CustomButton/Button.tsx","a1-main/m2-bll/actions/cards-actions.ts","a1-main/m1-ui/components/main/Header.tsx","a1-main/m2-bll/thunks/auth-thunk.ts","a1-main/m1-ui/components/common/CustomCheckBox/CheckBox.tsx","a1-main/m1-ui/components/common/CustomInput/Input.tsx","constants/common.ts","a2-features/f1/Login.tsx","a1-main/m1-ui/components/CardsPack.tsx","assets/images/threedots.svg","a1-main/m1-ui/components/common/Loader.tsx","a1-main/m1-ui/components/Pagination/Pagination.tsx","a1-main/m1-ui/components/UniversalTable.tsx","a1-main/m2-bll/reducers/cardspack-reducer.ts","a1-main/m3-dal/cards-api.ts","a1-main/m2-bll/thunks/cards-thunk.ts","a1-main/m1-ui/components/CardsTable.tsx","a1-main/m1-ui/components/common/Error404.tsx","a1-main/m1-ui/components/common/LoginForm.tsx","a1-main/m3-dal/cardspack-api.ts","a1-main/m3-dal/search-api.ts","a1-main/m2-bll/actions/register-actions.ts","a1-main/m2-bll/thunks/search-thunk.ts","a1-main/m1-ui/components/Search.tsx","a1-main/m1-ui/components/common/DoubleRangeSlider/DoubleRangeSlider.tsx","a1-main/m1-ui/components/SelectingSidebar.tsx","a1-main/m1-ui/components/PackCardsTable.tsx","a1-main/m1-ui/components/Profile.tsx","a1-main/m1-ui/components/TestComponent.tsx","a1-main/m2-bll/reducers/profile-reducer.ts","a1-main/m3-dal/register-api.ts","a2-features/f2/Register.tsx","a1-main/m2-bll/thunks/register-thunk.ts","a1-main/m3-dal/password-api.ts","a2-features/f3/NewPassword.tsx","a1-main/m2-bll/thunks/password-thunk.ts","a2-features/f3/RecoveryPassword.tsx","a1-main/m1-ui/components/main/RoutesContainer.tsx","a1-main/m1-ui/components/main/App.tsx","reportWebVitals.ts","a1-main/m2-bll/reducers/app-reducer.ts","a1-main/m2-bll/reducers/auth-reducer.ts","a1-main/m2-bll/reducers/cards-reducer.ts","a1-main/m2-bll/reducers/password-reducer.ts","a1-main/m2-bll/reducers/register-reducer.ts","a1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","ACTIONS_TYPE_APP","AUTH_ACTIONS_TYPE","setErrorMessageAC","error","textError","type","SET_ERROR_MESSAGE","setIsFethingAC","isFetching","SET_IS_FETHING","setStatusAC","status","SET_STATUS","setEmailAC","email","SET_EMAIL","ACTIONS_TYPE_PASSWORD","setAuthUserData","authUserData","isAuth","SET_USER_DATA","PATH","successRenamePasswordAC","passwordRename","RENAME_PASSWORD","instance","axios","create","baseURL","process","withCredentials","authAPI","credentials","post","delete","ErrorAll","useSelector","state","app","dispatch","useDispatch","deleteMessageError","useEffect","setTimeout","className","s","errorAll","Spinner","preloader","src","alt","Button","children","condition","onClick","disabled","finalClassName","style","red","default","CARDS_ACTIONS_TYPE","Header","AuthUserStatus","auth","header","headerContainer","title","headerBlock","itemMenu","to","PROFILE","isActive","active","CARDS","a","DELETE_USER_DATA","isAxiosError","response","errorMessage","message","Checkbox","memo","onChangeChecked","finalInputClassName","checkbox","onChange","e","currentTarget","checked","spanClassName","Input","placeholder","onChangeText","value","finalSpanClassName","errorInput","superInput","trim","EMAIL","PASSWORD","CONFIRM_PASSWORD","EMPTY_STRING","emailValidator","Login","errorEmailRequired","errorPasswordRequired","useState","setEmail","emailError","setEmailError","password","setPassword","passwordError","setPasswordError","rememberMe","setRememberMe","loginCredentials","onSubmit","preventDefault","length","match","data","currentEmailValue","errorText","currentPasswordValue","forgotblock","RECOVERY_PASSWORD","forgotPassword","SignUpBlock","REGISTER","SignUp","CardsPack","LOGIN_FORM","Loader","threedots","Pagination","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","appStatus","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination","button","text","currentNumber","filter","page","map","selectPage","UniversalTable","items","headers","deleteItem","updateItem","sortFunction","addBlock","extraButton","navigate","useNavigate","table","Object","entries","el","headerItem","sortButton","pack","keys","deleteButton","_id","updateButton","cardButton","CARDS_TABLE","ACTIONS_TYPE_CARDS_PACK","cardsAPI","cardsData","get","params","newCard","card","cardId","question","put","getCards","cardsPack_id","getState","cards","sortCards","pageCount","SET_CARDS_DATA","console","log","CardsTable","cardsTotalCount","packId","useLocation","answer","CardsContainer","CardsBlock","titleCardsBlock","loader","grade","updated","deleteCard","updateCardData","sortData","SORT_CARD_DATA","addNewCard","pageNumber","SET_CURRENT_CARD_PAGE","setCurrentCardPage","Error404","errorPage","errorTitle","errorImg","errorSign","errorButton","LoginForm","loginBlock","titleBlock","cardsPackAPI","sortPacks","newPack","cardsPack","name","newName","searchApi","searchRequest","minFilter","maxFilter","ACTIONS_TYPE","initialPackCardState","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","token","tokenDeathTime","searchText","setMinFilter","min","SET_MIN_FILTER","setMaxFilter","max","SET_MAX_FILTER","setMinCardsCount","SET_MIN_CARDS_COUNT","setMaxCardsCount","SET_MAX_CARDS_COUNT","setSearchText","SET_SEARCH_TEXT","setPackCardsAC","GET_CARDS_PACK_DATA","setCurrentPageAC","SET_CURRENT_PAGE","setCardsPackTotalCountAC","SET_CARD_PACKS_TOTAL_COUNT","SortPackCardsAC","sortValue","SORT_CARDS_PACK_DATA","setPackCardsTC","cardspack","searchPacks","Search","container","currentValue","buttonContainer","DoubleRangeSlider","props","onUpdate","values","handle","unencodedValues","start","startValues","prevProps","value1","this","setState","value2","step","disable","range","animate","connect","tooltips","round","from","React","Component","SelectingSidebar","setValue1","setValue2","SelectingSidebarContainer","profile","userAvatarContainer","userAvatar","userName","userJobTitle","descriptionForDoubleRangeSlider","DoubleRangeSliderContainer","Number","PacksCardsTable","packCards","sortPack","user_name","cardsCount","rating","id","Profile","TestComponent","registerAPI","Register","errorPasswordValidationMinLength","passwordConfirmError","setPasswordConfirmError","passwordConfirm","setPasswordConfirm","signUpStatus","register","LOGIN","registerStatus","SET_REGISTER_STATUS","toSignUp","passwordAPI","letterToThePost","newPassword","NewPassword","useParams","resetPasswordToken","renamePasswordTC","passwordValue","handlePasswordValueChange","passwordConfirmValue","handlePasswordConfirmValueChange","RecoveryPassword","sendMessageSuccess","emailForMail","messageSuccess","setMessageSuccess","SEND_MESSAGE_ON_MAIL","sendMessageOnEmailTC","RoutesContainer","path","element","index","NEW_PASSWORD","ERROR","WRONG_PAGE","TEST_PAGE","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialRecoveryState","initialAuthState","avatar","publicCardPacksCount","created","isAdmin","verified","initialCardsState","maxGrade","minGrade","packUserId","initialPasswordState","initialProfileState","initialRegisterState","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d72bc8bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorText\":\"Login_errorText__1QtID\",\"forgotblock\":\"Login_forgotblock__V1QyD\",\"forgotPassword\":\"Login_forgotPassword__2soQw\",\"SignUpBlock\":\"Login_SignUpBlock__2s8pf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardsContainer\":\"Cards_CardsContainer__3VrEc\",\"cardsBlock\":\"Cards_cardsBlock__1MlVh\",\"CardsWrapper\":\"Cards_CardsWrapper__2fBlB\",\"titleCardsBlock\":\"Cards_titleCardsBlock__2C7KU\",\"CardsTableContainer\":\"Cards_CardsTableContainer__2WG7y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__Or8hn\",\"loginBlock\":\"App_loginBlock__1bzpI\",\"titleBlock\":\"App_titleBlock__3icRq\",\"loader\":\"App_loader__3bro6\",\"preloader\":\"App_preloader__3EBfu\",\"errorAll\":\"App_errorAll__wGwqn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__3Z2FY\",\"text\":\"Pagination_text__1QSkx\",\"currentNumber\":\"Pagination_currentNumber__14uRg\",\"selectPage\":\"Pagination_selectPage__14iIw\",\"page\":\"Pagination_page__3JDtg\",\"button\":\"Pagination_button__3jybI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__2RrpN\",\"red\":\"Button_red__ppNHx\",\"changeButton\":\"Button_changeButton__2D8ht\",\"sortButton\":\"Button_sortButton__2VnlW\",\"deleteButton\":\"Button_deleteButton__nxSNd\",\"updateButton\":\"Button_updateButton__1oGzW\",\"cardButton\":\"Button_cardButton___3M3O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__gFoY0\",\"headerContainer\":\"Header_headerContainer__3UzBS\",\"headerBlock\":\"Header_headerBlock__1w9it\",\"itemMenu\":\"Header_itemMenu__lbFt9\",\"active\":\"Header_active__3piyb\",\"title\":\"Header_title__oYS7v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SelectingSidebarContainer\":\"SelectingSidebar_SelectingSidebarContainer__QX8Qj\",\"profile\":\"SelectingSidebar_profile__3jSJZ\",\"userAvatarContainer\":\"SelectingSidebar_userAvatarContainer__2PDxB\",\"userAvatar\":\"SelectingSidebar_userAvatar__3pjzl\",\"userName\":\"SelectingSidebar_userName__1Uhex\",\"userJobTitle\":\"SelectingSidebar_userJobTitle__4FtxR\",\"descriptionForDoubleRangeSlider\":\"SelectingSidebar_descriptionForDoubleRangeSlider__8e9li\",\"DoubleRangeSliderContainer\":\"SelectingSidebar_DoubleRangeSliderContainer__2o-aU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorPage\":\"ErrorPage_errorPage__3akoS\",\"errorTitle\":\"ErrorPage_errorTitle__30gez\",\"errorImg\":\"ErrorPage_errorImg__1pwfX\",\"errorSign\":\"ErrorPage_errorSign__2yIO5\",\"errorButton\":\"ErrorPage_errorButton__deR-L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"Input_superInput__1RJbc\",\"errorInput\":\"Input_errorInput__22sjQ\",\"error\":\"Input_error__3b4Pw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__2U7cG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"search_container__27Cnp\",\"buttonContainer\":\"search_buttonContainer__2cji7\"};","export enum ACTIONS_TYPE_APP {\r\n  SET_ERROR_MESSAGE = 'app-reducer/GET_NEW_PASS_DATA',\r\n  SET_IS_FETHING = 'app-reducer/SET_ISFETHING',\r\n  SET_STATUS = 'app-reducer/SET_STATUS',\r\n  SET_EMAIL = 'app-reducer/SET_EMAIL',\r\n}\r\ntype SetAppStatusActionType =\r\n  | ReturnType<typeof setErrorMessageAC>\r\n  | ReturnType<typeof setIsFethingAC>\r\n  | ReturnType<typeof setStatusAC>\r\n  | ReturnType<typeof setEmailAC>;\r\n\r\nexport type AppActionType = SetAppStatusActionType;\r\n\r\nexport const setErrorMessageAC = (error: boolean, textError: string) =>\r\n  ({\r\n    type: ACTIONS_TYPE_APP.SET_ERROR_MESSAGE,\r\n    error,\r\n    textError,\r\n  } as const);\r\n\r\nexport const setIsFethingAC = (isFetching: boolean) =>\r\n  ({\r\n    type: ACTIONS_TYPE_APP.SET_IS_FETHING,\r\n    isFetching,\r\n  } as const);\r\n\r\nexport const setStatusAC = (status: boolean) =>\r\n  ({\r\n    type: ACTIONS_TYPE_APP.SET_STATUS,\r\n    status,\r\n  } as const);\r\n\r\nexport const setEmailAC = (email: string) =>\r\n  ({\r\n    type: ACTIONS_TYPE_APP.SET_EMAIL,\r\n    email,\r\n  } as const);\r\n","import { MeResponseStateType } from '../../m3-dal/types/loginType';\r\n\r\nexport enum AUTH_ACTIONS_TYPE {\r\n  SET_USER_DATA = 'PlaingCards/auth/SET-USER-DATA',\r\n  DELETE_USER_DATA = 'PlaingCards/auth/DELETE_USER_DATA',\r\n}\r\n\r\ntype SetUserDataActionType = ReturnType<typeof setAuthUserData>;\r\ntype DeleteUserDataActionType = ReturnType<typeof deleteUserData>;\r\n\r\nexport type AuthActionsType = SetUserDataActionType | DeleteUserDataActionType;\r\n\r\nexport const setAuthUserData = (authUserData: MeResponseStateType, isAuth: boolean) =>\r\n  ({\r\n    type: AUTH_ACTIONS_TYPE.SET_USER_DATA,\r\n    authUserData,\r\n    isAuth,\r\n  } as const);\r\n\r\nexport const deleteUserData = () =>\r\n  ({\r\n    type: AUTH_ACTIONS_TYPE.DELETE_USER_DATA,\r\n  } as const);\r\n","export enum ACTIONS_TYPE_PASSWORD {\n  SEND_MESSAGE_ON_MAIL = 'password-reducer/SEND_MESSAGE_ON_MAIL',\n  RENAME_PASSWORD = 'password-reducer/RENAME_PASSWORD',\n}\n\nexport const successSendMessgeAC = (sendMessageSuccess: boolean) =>\n  ({\n    type: ACTIONS_TYPE_PASSWORD.SEND_MESSAGE_ON_MAIL,\n    sendMessageSuccess,\n  } as const);\n\nexport const successRenamePasswordAC = (passwordRename: boolean) =>\n  ({\n    type: ACTIONS_TYPE_PASSWORD.RENAME_PASSWORD,\n    passwordRename,\n  } as const);\n\nexport type PasswordActionType =\n  | ReturnType<typeof successSendMessgeAC>\n  | ReturnType<typeof successRenamePasswordAC>;\n","export enum PATH {\r\n  PROFILE = '/profile',\r\n  LOGIN_FORM = '/',\r\n  LOGIN = 'login',\r\n  REGISTER = 'register',\r\n  NEW_PASSWORD = 'new_pass',\r\n  RECOVERY_PASSWORD = 'recovery',\r\n  ERROR = '404',\r\n  WRONG_PAGE = '*',\r\n  TEST_PAGE = 'test',\r\n  CARDS = '/cards/',\r\n  CARDS_PACK_TABLE = 'cards_pack_table',\r\n  CARDS_TABLE = 'cards_table',\r\n}\r\n","import axios from 'axios';\n\nexport const instance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  withCredentials: true,\n});\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { instance } from 'a1-main/m3-dal/instance';\r\nimport {\r\n  DeleteMeResponseStateType,\r\n  LoginCredentialsSendType,\r\n  MeResponseStateType,\r\n} from 'a1-main/m3-dal/types/loginType';\r\n\r\nexport const authAPI = {\r\n  login(credentials: LoginCredentialsSendType) {\r\n    return instance.post<LoginCredentialsSendType, AxiosResponse<MeResponseStateType>>(\r\n      `auth/login`,\r\n      credentials,\r\n    );\r\n  },\r\n\r\n  me() {\r\n    return instance.post<{}, AxiosResponse<MeResponseStateType>>(`auth/me`, {});\r\n  },\r\n\r\n  deleteMe() {\r\n    return instance.delete<AxiosResponse<DeleteMeResponseStateType>>(`auth/me`);\r\n  },\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { ReturnComponentType } from '../../../../types/ReturnComponentType';\r\nimport { setErrorMessageAC } from '../../../m2-bll/actions/app-actions';\r\nimport { AppRootState } from '../../../m2-bll/store';\r\n\r\nimport s from 'styles/App.module.css';\r\n\r\nexport const ErrorAll = (): ReturnComponentType => {\r\n  const error = useSelector<AppRootState, boolean>(state => state.app.error);\r\n  const textError = useSelector<AppRootState, string>(state => state.app.textError);\r\n  const dispatch = useDispatch();\r\n  const deleteMessageError = (): any => dispatch(setErrorMessageAC(false, ''));\r\n  const time = 3000;\r\n  useEffect(() => {\r\n    setTimeout(deleteMessageError, time);\r\n  }, [error]);\r\n\r\n  return (\r\n    <div>\r\n      {error && (\r\n        <div className={s.errorAll}>\r\n          <h1>An error has occurred</h1>\r\n          <h2>{textError}</h2>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/preloader.eb47674d.svg\";","import { ReturnComponentType } from '../../../../types/ReturnComponentType';\r\n\r\nimport preloader from 'assets/images/preloader.svg';\r\nimport s from 'styles/App.module.css';\r\n\r\nexport const Spinner = (): ReturnComponentType => (\r\n  <div>\r\n    <div className={s.preloader}>\r\n      <img src={preloader} alt=\"\" />\r\n    </div>\r\n  </div>\r\n);\r\n","import { FC } from 'react';\r\n\r\nimport { ButtonType } from './types/buttonType';\r\n\r\nimport style from 'styles/Button.module.css';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport const Button: FC<ButtonType> = ({\r\n  children,\r\n  className,\r\n  condition,\r\n  onClick,\r\n  type,\r\n  disabled,\r\n}): ReturnComponentType => {\r\n  const finalClassName = `${condition ? style.red : style.default} ${className}`;\r\n  return (\r\n    // eslint-disable-next-line react/button-has-type\r\n    <button type={type} className={finalClassName} onClick={onClick} disabled={disabled}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n","import { cardsResponseType } from 'a1-main/m3-dal/types/cardsType';\r\n\r\nexport enum CARDS_ACTIONS_TYPE {\r\n  SET_CARDS_DATA = 'PlayingCards/cards/SET_CARDS_DATA',\r\n  SET_CURRENT_CARD_PAGE = 'PlayingCards/cards/SET_CURRENT_CARD_PAGE',\r\n  SORT_CARD_DATA = 'PlayingCards/cards/CURRENT_CARD_PAGE',\r\n}\r\n\r\nexport const setCardsData = (cardsData: cardsResponseType) =>\r\n  ({\r\n    type: CARDS_ACTIONS_TYPE.SET_CARDS_DATA,\r\n    cardsData,\r\n  } as const);\r\n\r\nexport const setCurrentCardPage = (page: number) =>\r\n  ({ type: CARDS_ACTIONS_TYPE.SET_CURRENT_CARD_PAGE, page } as const);\r\n\r\nexport const SortCardData = (sortData: string) =>\r\n  ({ type: CARDS_ACTIONS_TYPE.SORT_CARD_DATA, sortData } as const);\r\n\r\nexport type CardsActionsType =\r\n  | ReturnType<typeof setCardsData>\r\n  | ReturnType<typeof setCurrentCardPage>\r\n  | ReturnType<typeof SortCardData>;\r\n","import React from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { AppRootState } from '../../../m2-bll/store';\r\nimport { Button } from '../common/CustomButton/Button';\r\n\r\nimport { setEmailAC } from 'a1-main/m2-bll/actions/app-actions';\r\nimport { deleteAuthUserData } from 'a1-main/m2-bll/thunks/auth-thunk';\r\nimport { PATH } from 'enums/routes';\r\nimport style from 'styles/Header.module.css';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport const Header = (): ReturnComponentType => {\r\n  const AuthUserStatus = useSelector<AppRootState, boolean>(state => state.auth.isAuth);\r\n  const isFetching = useSelector<AppRootState, boolean>(state => state.app.isFetching);\r\n  const dispatch = useDispatch();\r\n  const logOut = (): void => {\r\n    dispatch(deleteAuthUserData());\r\n    dispatch(setEmailAC(''));\r\n  };\r\n  return (\r\n    <div className={style.header}>\r\n      <div className={style.headerContainer}>\r\n        <h1 className={style.title}>Plaing Cards</h1>\r\n        {AuthUserStatus && (\r\n          <div className={style.headerBlock}>\r\n            <div className={style.itemMenu}>\r\n              <NavLink\r\n                to={PATH.PROFILE}\r\n                className={({ isActive }) => (isActive ? style.active : '')}\r\n              >\r\n                Profile\r\n              </NavLink>\r\n            </div>\r\n            <div className={style.itemMenu}>\r\n              <NavLink\r\n                to={PATH.CARDS}\r\n                className={({ isActive }) => (isActive ? style.active : '')}\r\n              >\r\n                Packs List\r\n              </NavLink>\r\n            </div>\r\n            <div>\r\n              <Button onClick={logOut} disabled={isFetching}>\r\n                Log out\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import axios from 'axios';\r\n\r\nimport { setErrorMessageAC, setIsFethingAC, setStatusAC } from '../actions/app-actions';\r\nimport { setAuthUserData, deleteUserData } from '../actions/auth-actions';\r\nimport { successRenamePasswordAC } from '../actions/password-actions';\r\n\r\nimport { AppThunk } from 'a1-main/m2-bll/store';\r\nimport { authAPI } from 'a1-main/m3-dal/auth-api';\r\nimport { LoginCredentialsSendType } from 'a1-main/m3-dal/types/loginType';\r\n\r\nexport const getAuthUserData = (): AppThunk => async dispatch => {\r\n  dispatch(setIsFethingAC(true));\r\n  try {\r\n    const response = await authAPI.me();\r\n    dispatch(setAuthUserData(response.data, true));\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      const errorMessage = error.response.data.error;\r\n      console.log(errorMessage);\r\n      // dispatch(setErrorMessageAC(true, `Вы не авторизованы! ${errorMessage}`));\r\n    } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\r\n      dispatch(setErrorMessageAC(true, `Нет соединения`));\r\n    }\r\n  } finally {\r\n    dispatch(setIsFethingAC(false));\r\n  }\r\n};\r\n\r\nexport const toAuth =\r\n  (credentials: LoginCredentialsSendType): AppThunk =>\r\n  async dispatch => {\r\n    dispatch(setStatusAC(true));\r\n    try {\r\n      const response = await authAPI.login(credentials);\r\n      dispatch(setAuthUserData(response.data, true));\r\n      dispatch(successRenamePasswordAC(false));\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error) && error.response) {\r\n        const errorMessage = error.response.data.error;\r\n        dispatch(setErrorMessageAC(true, `login error: ${errorMessage}`));\r\n      } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\r\n        dispatch(setErrorMessageAC(true, `no connection!`));\r\n      }\r\n    } finally {\r\n      dispatch(setStatusAC(false));\r\n    }\r\n  };\r\n\r\nexport const deleteAuthUserData = (): AppThunk => async dispatch => {\r\n  dispatch(setStatusAC(true));\r\n  try {\r\n    await authAPI.deleteMe();\r\n    dispatch(deleteUserData());\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      const errorMessage = error.response;\r\n      dispatch(setErrorMessageAC(true, `you are not logged out: ${errorMessage}`));\r\n    } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\r\n      dispatch(setErrorMessageAC(true, `you are not logged out:no connection!`));\r\n    }\r\n  } finally {\r\n    dispatch(setStatusAC(false));\r\n  }\r\n};\r\n","import { ChangeEvent, FC, memo } from 'react';\n\nimport { CheckboxType } from './types/checkBoxType';\n\nimport style from 'styles/CheckBox.module.css';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const Checkbox: FC<CheckboxType> = memo(\n  ({ onChangeChecked, className, children }): ReturnComponentType => {\n    const handleCheckboxValueChange = (e: ChangeEvent<HTMLInputElement>): void => {\n      if (onChangeChecked) {\n        onChangeChecked(e.currentTarget.checked);\n      }\n    };\n\n    const finalInputClassName = `${style.checkbox} ${className || ''}`;\n\n    return (\n      // eslint-disable-next-line jsx-a11y/label-has-associated-control\n      <label>\n        <input\n          type=\"checkbox\"\n          onChange={handleCheckboxValueChange}\n          className={finalInputClassName}\n        />\n        {children && <span className={style.spanClassName}>{children}</span>}\n      </label>\n    );\n  },\n);\n","import { ChangeEvent, FC } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { setEmailAC } from '../../../../m2-bll/actions/app-actions';\r\n\r\nimport { CustomInputType } from './types/CustomInputType';\r\n\r\nimport style from 'styles/Input.module.css';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport const Input: FC<CustomInputType> = ({\r\n  // title,\r\n  placeholder,\r\n  onChangeText,\r\n  error,\r\n  className,\r\n  spanClassName,\r\n  value,\r\n  type,\r\n}): ReturnComponentType => {\r\n  const dispatch = useDispatch();\r\n  const handleInputValueChange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n    if (onChangeText) {\r\n      onChangeText(e.currentTarget.value.trim());\r\n      dispatch(setEmailAC(e.currentTarget.value));\r\n    }\r\n  };\r\n\r\n  const finalSpanClassName = `${style.error} ${spanClassName || ''}`;\r\n  const finalInputClassName = `${\r\n    error ? style.errorInput : style.superInput\r\n  } ${className}`;\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type={type}\r\n        onChange={handleInputValueChange}\r\n        className={finalInputClassName}\r\n        value={value}\r\n        placeholder={placeholder}\r\n      />\r\n      {error && <span className={finalSpanClassName}>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n","export const EMAIL = 'Email';\r\nexport const PASSWORD = 'Password';\r\nexport const SEARCH = 'Search';\r\nexport const CONFIRM_PASSWORD = 'Confirm Password';\r\nexport const EMPTY_STRING = '';\r\nexport const ZERO_LENGTH = 0;\r\nexport const emailValidator = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\r\nexport const FIRST_ELEMENT = 0;\r\nexport const SECOND_ELEMENT = 1;\r\nexport const PORTION_SIZE = 10;\r\nexport const BUTTON_CARDS = 'Cards';\r\n","import React, { FormEvent, useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navigate, NavLink } from 'react-router-dom';\r\n\r\nimport { Button } from 'a1-main/m1-ui/components/common/CustomButton/Button';\r\nimport { Checkbox } from 'a1-main/m1-ui/components/common/CustomCheckBox/CheckBox';\r\nimport { Input } from 'a1-main/m1-ui/components/common/CustomInput/Input';\r\nimport { AppRootState } from 'a1-main/m2-bll/store';\r\nimport { toAuth } from 'a1-main/m2-bll/thunks/auth-thunk';\r\nimport { LoginCredentialsSendType } from 'a1-main/m3-dal/types/loginType';\r\nimport {\r\n  emailValidator,\r\n  EMPTY_STRING,\r\n  PASSWORD,\r\n  EMAIL,\r\n  ZERO_LENGTH,\r\n} from 'constants/common';\r\nimport { PATH } from 'enums/routes';\r\nimport style from 'styles/Login.module.css';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport const Login = (): ReturnComponentType => {\r\n  const passwordMinLength = 7;\r\n  const errorEmailValidation = 'Email is incorrect';\r\n  const errorEmailRequired = 'Email is required';\r\n  const errorPasswordRequired = 'Password is required';\r\n  const errorPasswordValidationMinLength = 'Password must be at least 7 characters';\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = useState<string>(EMPTY_STRING);\r\n  const [emailError, setEmailError] = useState<string>(EMPTY_STRING);\r\n  const [password, setPassword] = useState<string>(EMPTY_STRING);\r\n  const [passwordError, setPasswordError] = useState<string>(EMPTY_STRING);\r\n  const [rememberMe, setRememberMe] = useState<boolean>(false);\r\n  const loginCredentials: LoginCredentialsSendType = { email, password, rememberMe };\r\n  const AuthUserStatus = useSelector<AppRootState, boolean>(state => state.auth.isAuth);\r\n  const isFetching = useSelector<AppRootState, boolean>(state => state.app.isFetching);\r\n  const handleEmailValueChange = (emailValue: string): void => {\r\n    setEmail(emailValue);\r\n    if (emailError) {\r\n      setEmailError(EMPTY_STRING);\r\n    }\r\n  };\r\n  const handlePasswordValueChange = (passwordValue: string): void => {\r\n    setPassword(passwordValue);\r\n    if (passwordError) {\r\n      setPasswordError(EMPTY_STRING);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault();\r\n    if (email.length === ZERO_LENGTH && password.length === ZERO_LENGTH) {\r\n      setEmailError(errorEmailRequired);\r\n      setPasswordError(errorPasswordRequired);\r\n      return;\r\n    }\r\n\r\n    if (email.length === ZERO_LENGTH) {\r\n      setEmailError(errorEmailRequired);\r\n    }\r\n    if (password.length === ZERO_LENGTH) {\r\n      setPasswordError(errorPasswordRequired);\r\n    }\r\n    if (email.match(emailValidator) === null && email.length > ZERO_LENGTH) {\r\n      setEmailError(errorEmailValidation);\r\n    }\r\n    if (password.length < passwordMinLength && password.length > ZERO_LENGTH) {\r\n      setPasswordError(errorPasswordValidationMinLength);\r\n    }\r\n    if (email.match(emailValidator) && password.length >= passwordMinLength) {\r\n      setEmailError(EMPTY_STRING);\r\n      setPasswordError(EMPTY_STRING);\r\n      dispatch(toAuth(loginCredentials));\r\n    }\r\n  };\r\n  if (AuthUserStatus) {\r\n    return <Navigate to={PATH.PROFILE} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <Input\r\n          title={EMAIL}\r\n          placeholder=\"Email\"\r\n          onChangeText={(currentEmailValue: string) =>\r\n            handleEmailValueChange(currentEmailValue)\r\n          }\r\n          value={email}\r\n          type=\"email\"\r\n        />\r\n        {emailError && (\r\n          <div>\r\n            <span className={style.errorText}>{emailError}</span>\r\n          </div>\r\n        )}\r\n        <Input\r\n          title={PASSWORD}\r\n          placeholder=\"Password\"\r\n          onChangeText={(currentPasswordValue: string) =>\r\n            handlePasswordValueChange(currentPasswordValue)\r\n          }\r\n          value={password}\r\n          type=\"password\"\r\n        />\r\n        {passwordError && (\r\n          <div>\r\n            <span className={style.errorText}>{passwordError}</span>\r\n          </div>\r\n        )}\r\n        <Checkbox onChangeChecked={setRememberMe} checked={rememberMe} type=\"checkbox\">\r\n          Remember me\r\n        </Checkbox>\r\n        <div className={style.forgotblock}>\r\n          <NavLink to={PATH.RECOVERY_PASSWORD} className={style.forgotPassword}>\r\n            I forgot password\r\n          </NavLink>\r\n        </div>\r\n        <div>\r\n          <Button condition={isFetching} type=\"submit\">\r\n            Log in\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <div className={style.SignUpBlock}>\r\n        <p>Don`t have an account?</p>\r\n        <NavLink to={PATH.REGISTER} className={style.SignUp}>\r\n          SignUp\r\n        </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useSelector } from 'react-redux';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\n\r\nimport { PATH } from '../../../enums/routes';\r\nimport { AppRootState } from '../../m2-bll/store';\r\n\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport const CardsPack = (): ReturnComponentType => {\r\n  const AuthUserStatus = useSelector<AppRootState, boolean>(state => state.auth.isAuth);\r\n  if (!AuthUserStatus) return <Navigate to={PATH.LOGIN_FORM} />;\r\n  return (\r\n    <div>\r\n      <Outlet />\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/threedots.4f35d4d7.svg\";","import { ReturnComponentType } from '../../../../types/ReturnComponentType';\r\n\r\nimport threedots from 'assets/images/threedots.svg';\r\nimport s from 'styles/App.module.css';\r\n\r\nexport const Loader = (): ReturnComponentType => (\r\n  <div>\r\n    <div className={s.preloader}>\r\n      <img src={threedots} alt=\"\" />\r\n    </div>\r\n  </div>\r\n);\r\n","import React, { useState } from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { AppRootState } from '../../../m2-bll/store';\r\nimport { Button } from '../common/CustomButton/Button';\r\n\r\nimport s from 'styles/Pagination.module.css';\r\n\r\ntype PaginationPropsType = {\r\n  totalItemsCount: number;\r\n  pageSize: number;\r\n  currentPage: number;\r\n  onPageChanged: (pageNumber: number) => void;\r\n  portionSize: number;\r\n};\r\n\r\nexport const Pagination: React.FC<PaginationPropsType> = ({\r\n  totalItemsCount,\r\n  pageSize,\r\n  currentPage,\r\n  onPageChanged,\r\n  portionSize,\r\n}) => {\r\n  const one = 1;\r\n  const pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n  const pages = [];\r\n  // eslint-disable-next-line no-plusplus\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n  const appStatus = useSelector<AppRootState, boolean>(state => state.app.status);\r\n  const portionCount = pagesCount / portionSize;\r\n  const [portionNumber, setPortionNumber] = useState<number>(one);\r\n  const leftPortionPageNumber = (portionNumber - one) * portionSize + one;\r\n  const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n  return (\r\n    <div className={s.pagination}>\r\n      <div>\r\n        <Button\r\n          disabled={portionNumber <= one}\r\n          className={s.button}\r\n          onClick={() => setPortionNumber(portionNumber - one)}\r\n        >\r\n          Prev list\r\n        </Button>\r\n\r\n        <Button\r\n          disabled={currentPage <= one || appStatus}\r\n          className={s.button}\r\n          onClick={() => onPageChanged(currentPage - one)}\r\n        >\r\n          Prev\r\n        </Button>\r\n\r\n        <Button\r\n          disabled={currentPage >= pagesCount || appStatus}\r\n          className={s.button}\r\n          onClick={() => onPageChanged(currentPage + one)}\r\n        >\r\n          Next\r\n        </Button>\r\n\r\n        <Button\r\n          disabled={portionCount <= portionNumber}\r\n          className={s.button}\r\n          onClick={() => setPortionNumber(portionNumber + one)}\r\n        >\r\n          Next list\r\n        </Button>\r\n      </div>\r\n      <div className={s.text}>\r\n        Current page: <span className={s.currentNumber}>{currentPage}</span>\r\n      </div>\r\n      <div>\r\n        {pages\r\n          .filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n          .map(page => (\r\n            <button\r\n              type=\"button\"\r\n              key={page}\r\n              onClick={() => {\r\n                onPageChanged(page);\r\n              }}\r\n              disabled={appStatus}\r\n              className={`${s.page} ${currentPage === page ? s.selectPage : ''}`}\r\n            >\r\n              {page}\r\n            </button>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { FIRST_ELEMENT, SECOND_ELEMENT } from '../../../constants/common';\r\nimport { PATH } from '../../../enums/routes';\r\nimport style from '../../../styles/Button.module.css';\r\nimport s from '../../../styles/Table.module.css';\r\nimport { ReturnComponentType } from '../../../types/ReturnComponentType';\r\n\r\nimport { Button } from './common/CustomButton/Button';\r\n\r\ntype UniversalTableType = {\r\n  items: Array<any>;\r\n  headers: { [x: string]: string };\r\n  deleteItem: (id: string) => void;\r\n  updateItem: (id: string, title: string) => void;\r\n  sortFunction: (value: string) => void;\r\n  addBlock: () => void;\r\n  // eslint-disable-next-line react/no-unused-prop-types,react/require-default-props\r\n  extraButton?: string;\r\n};\r\nexport const UniversalTable: FC<UniversalTableType> = ({\r\n  items,\r\n  headers,\r\n  deleteItem,\r\n  updateItem,\r\n  sortFunction,\r\n  addBlock,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  extraButton,\r\n}): ReturnComponentType => {\r\n  const navigate = useNavigate();\r\n  return (\r\n    <table className={s.table}>\r\n      <tr>\r\n        {Object.entries(headers).map(el => (\r\n          <th key={el[FIRST_ELEMENT]} className={s.headerItem}>\r\n            {el[SECOND_ELEMENT]}\r\n            <div>\r\n              <Button\r\n                className={style.sortButton}\r\n                type=\"button\"\r\n                onClick={() => sortFunction(`0${el[FIRST_ELEMENT]}`)}\r\n              >\r\n                up\r\n              </Button>\r\n              <Button\r\n                className={style.sortButton}\r\n                type=\"button\"\r\n                onClick={() => sortFunction(`0${el[FIRST_ELEMENT]}`)}\r\n              >\r\n                down\r\n              </Button>\r\n            </div>\r\n          </th>\r\n        ))}\r\n        <th>\r\n          <Button type=\"button\" onClick={() => addBlock()}>\r\n            Add\r\n          </Button>\r\n        </th>\r\n      </tr>\r\n      {items.map(pack => (\r\n        // eslint-disable-next-line no-underscore-dangle\r\n        <tr key={pack._id}>\r\n          {Object.keys(headers).map(el => (\r\n            <td key={el}>\r\n              <span>{pack[el]}</span>\r\n            </td>\r\n          ))}\r\n          <td>\r\n            <Button\r\n              className={style.deleteButton}\r\n              type=\"button\"\r\n              /* eslint-disable-next-line no-underscore-dangle */\r\n              onClick={() => deleteItem(pack._id)}\r\n            >\r\n              Delete\r\n            </Button>\r\n\r\n            <Button\r\n              className={style.updateButton}\r\n              type=\"button\"\r\n              /* eslint-disable-next-line no-underscore-dangle */\r\n              onClick={() => updateItem(pack._id, 'x0x0x0x00x')}\r\n            >\r\n              Update\r\n            </Button>\r\n            {extraButton && (\r\n              <Button\r\n                className={style.cardButton}\r\n                type=\"button\"\r\n                /* eslint-disable-next-line no-underscore-dangle */\r\n                onClick={() => navigate(PATH.CARDS_TABLE, { state: pack._id })}\r\n              >\r\n                {extraButton}\r\n              </Button>\r\n            )}\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </table>\r\n  );\r\n};\r\n","import axios from 'axios';\r\n\r\nimport { cardsPackAPI } from '../../m3-dal/cardspack-api';\r\nimport { searchApi } from '../../m3-dal/search-api';\r\nimport { setErrorMessageAC, setStatusAC } from '../actions/app-actions';\r\nimport { AppThunk } from '../store';\r\n\r\nexport enum ACTIONS_TYPE_CARDS_PACK {\r\n  GET_CARDS_PACK_DATA = 'cardspack-reducer/GET-CARDS-PACK-DATA',\r\n  SORT_CARDS_PACK_DATA = 'cardspack-reducer/SORT-CARDS-PACK-DATA',\r\n  SET_CURRENT_PAGE = 'cardspack-reducer/SET-CURRENT-PAGE',\r\n  SET_CARD_PACKS_TOTAL_COUNT = 'cardspack-reducer/SET-CARD-PACKS-TOTAL-COUNT',\r\n  SET_SEARCH_TEXT = 'cardspack-reducer/SET-SEARCH-TEXT',\r\n  SET_MIN_CARDS_COUNT = 'cardspack-reducer/SET-MIN-CARDS-COUNT',\r\n  SET_MAX_CARDS_COUNT = 'cardspack-reducer/SET-MAX-CARDS-COUNT',\r\n  SET_MIN_FILTER = 'cardspack-reducer/SET-MIN-FILTER',\r\n  SET_MAX_FILTER = 'cardspack-reducer/SET-MAX-FILTER',\r\n}\r\n\r\nexport type PacksType = {\r\n  cardsCount: number;\r\n  created: string;\r\n  grade: number;\r\n  // eslint-disable-next-line camelcase\r\n  more_id: string;\r\n  name: string;\r\n  path: string;\r\n  private: boolean;\r\n  rating: number;\r\n  shots: number;\r\n  type: string;\r\n  updated: string;\r\n  // eslint-disable-next-line camelcase\r\n  user_id: string;\r\n  // eslint-disable-next-line camelcase\r\n  user_name: string;\r\n  __v: number;\r\n  _id: string;\r\n};\r\n\r\nconst initialPackCardState = {\r\n  cardPacks: [] as Array<PacksType>,\r\n  cardPacksTotalCount: 0,\r\n  maxCardsCount: 0,\r\n  minCardsCount: 0,\r\n  page: 1,\r\n  pageCount: 4,\r\n  portionSize: 10,\r\n  token: '',\r\n  tokenDeathTime: 0,\r\n  sortPacks: '0updated',\r\n  searchText: '',\r\n  minFilter: 0,\r\n  maxFilter: 50,\r\n};\r\n\r\ntype InitialPackCardStateStateType = typeof initialPackCardState;\r\n\r\nexport type CardsPackActionType =\r\n  | ReturnType<typeof setPackCardsAC>\r\n  | ReturnType<typeof setCardsPackTotalCountAC>\r\n  | ReturnType<typeof setCurrentPageAC>\r\n  | ReturnType<typeof SortPackCardsAC>\r\n  | ReturnType<typeof setSearchText>\r\n  | ReturnType<typeof setMinCardsCount>\r\n  | ReturnType<typeof setMaxCardsCount>\r\n  | ReturnType<typeof setMinFilter>\r\n  | ReturnType<typeof setMaxFilter>;\r\n\r\nexport const setMinFilter = (min: number) =>\r\n  ({ type: ACTIONS_TYPE_CARDS_PACK.SET_MIN_FILTER, min } as const);\r\n\r\nexport const setMaxFilter = (max: number) =>\r\n  ({ type: ACTIONS_TYPE_CARDS_PACK.SET_MAX_FILTER, max } as const);\r\n\r\nexport const setMinCardsCount = (minCardsCount: number) =>\r\n  ({ type: ACTIONS_TYPE_CARDS_PACK.SET_MIN_CARDS_COUNT, minCardsCount } as const);\r\n\r\nexport const setMaxCardsCount = (maxCardsCount: number) =>\r\n  ({ type: ACTIONS_TYPE_CARDS_PACK.SET_MAX_CARDS_COUNT, maxCardsCount } as const);\r\n\r\nexport const setSearchText = (searchText: string) =>\r\n  ({ type: ACTIONS_TYPE_CARDS_PACK.SET_SEARCH_TEXT, searchText } as const);\r\n\r\nexport const setPackCardsAC = (cardPacks: Array<PacksType>) =>\r\n  ({ type: ACTIONS_TYPE_CARDS_PACK.GET_CARDS_PACK_DATA, cardPacks } as const);\r\n\r\nexport const setCurrentPageAC = (page: number) =>\r\n  ({ type: ACTIONS_TYPE_CARDS_PACK.SET_CURRENT_PAGE, page } as const);\r\n\r\nexport const setCardsPackTotalCountAC = (cardPacksTotalCount: number) =>\r\n  ({\r\n    type: ACTIONS_TYPE_CARDS_PACK.SET_CARD_PACKS_TOTAL_COUNT,\r\n    cardPacksTotalCount,\r\n  } as const);\r\n\r\nexport const cardsPackReducer = (\r\n  state: InitialPackCardStateStateType = initialPackCardState,\r\n  action: CardsPackActionType,\r\n): InitialPackCardStateStateType => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE_CARDS_PACK.GET_CARDS_PACK_DATA:\r\n      return { ...state, cardPacks: action.cardPacks };\r\n    case ACTIONS_TYPE_CARDS_PACK.SORT_CARDS_PACK_DATA:\r\n      return { ...state, sortPacks: action.sortValue };\r\n    case ACTIONS_TYPE_CARDS_PACK.SET_CURRENT_PAGE:\r\n      return { ...state, page: action.page };\r\n    case ACTIONS_TYPE_CARDS_PACK.SET_CARD_PACKS_TOTAL_COUNT:\r\n      return { ...state, cardPacksTotalCount: action.cardPacksTotalCount };\r\n    case ACTIONS_TYPE_CARDS_PACK.SET_SEARCH_TEXT:\r\n      return { ...state, searchText: action.searchText };\r\n    case ACTIONS_TYPE_CARDS_PACK.SET_MIN_CARDS_COUNT:\r\n      return { ...state, minCardsCount: action.minCardsCount };\r\n    case ACTIONS_TYPE_CARDS_PACK.SET_MAX_CARDS_COUNT:\r\n      return { ...state, maxCardsCount: action.maxCardsCount };\r\n    case ACTIONS_TYPE_CARDS_PACK.SET_MIN_FILTER:\r\n      return { ...state, minFilter: action.min };\r\n    case ACTIONS_TYPE_CARDS_PACK.SET_MAX_FILTER:\r\n      return { ...state, maxFilter: action.max };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const SortPackCardsAC = (sortValue: string) =>\r\n  ({ type: ACTIONS_TYPE_CARDS_PACK.SORT_CARDS_PACK_DATA, sortValue } as const);\r\n\r\nexport const setPackCardsTC = (): AppThunk => async (dispatch, getState) => {\r\n  const { sortPacks, pageCount, page, searchText, minCardsCount, maxCardsCount } =\r\n    getState().cardspack;\r\n  dispatch(setStatusAC(true));\r\n  if (!searchText) {\r\n    try {\r\n      const cardsPack = await cardsPackAPI.readCardsPack(sortPacks, pageCount, page);\r\n      dispatch(setPackCardsAC(cardsPack.data.cardPacks));\r\n      dispatch(setCardsPackTotalCountAC(cardsPack.data.cardPacksTotalCount));\r\n      dispatch(setMinCardsCount(cardsPack.data.minCardsCount));\r\n      dispatch(setMaxCardsCount(cardsPack.data.maxCardsCount));\r\n      if (minCardsCount !== cardsPack.data.minCardsCount) {\r\n        dispatch(setMinFilter(cardsPack.data.minCardsCount));\r\n      }\r\n      if (maxCardsCount !== cardsPack.data.maxCardsCount) {\r\n        dispatch(setMaxFilter(cardsPack.data.maxCardsCount));\r\n      }\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error) && error.response) {\r\n        const errorMessage = error.response;\r\n        dispatch(setErrorMessageAC(true, `error: ${errorMessage}`));\r\n      } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\r\n        dispatch(setErrorMessageAC(true, `you are not logged out:no connection!`));\r\n      }\r\n    } finally {\r\n      dispatch(setStatusAC(false));\r\n    }\r\n  } else {\r\n    try {\r\n      const response = await searchApi.searchPacks(\r\n        sortPacks,\r\n        searchText,\r\n        pageCount,\r\n        page,\r\n        minCardsCount,\r\n        maxCardsCount,\r\n      );\r\n      dispatch(setPackCardsAC(response.data.cardPacks));\r\n      dispatch(setCardsPackTotalCountAC(response.data.cardPacksTotalCount));\r\n      dispatch(setMinCardsCount(response.data.minCardsCount));\r\n      dispatch(setMaxCardsCount(response.data.maxCardsCount));\r\n      if (minCardsCount !== response.data.minCardsCount) {\r\n        dispatch(setMinFilter(response.data.minCardsCount));\r\n      }\r\n      if (maxCardsCount !== response.data.maxCardsCount) {\r\n        dispatch(setMaxFilter(response.data.maxCardsCount));\r\n      }\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error) && error.response) {\r\n        const errorMessage = error.response;\r\n        dispatch(setErrorMessageAC(true, `error: ${errorMessage}`));\r\n      } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\r\n        dispatch(setErrorMessageAC(true, `you are not logged out:no connection!`));\r\n      }\r\n    } finally {\r\n      dispatch(setStatusAC(false));\r\n    }\r\n  }\r\n};\r\n\r\nexport const createPackCardsTC =\r\n  (name: string): AppThunk =>\r\n  async dispatch => {\r\n    dispatch(setStatusAC(true));\r\n    try {\r\n      const cardsPack = await cardsPackAPI.createCardsPack(name);\r\n      dispatch(setPackCardsTC());\r\n      console.log(cardsPack.data);\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error) && error.response) {\r\n        const errorMessage = error.response;\r\n        dispatch(setErrorMessageAC(true, `error: ${errorMessage}`));\r\n      } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\r\n        dispatch(setErrorMessageAC(true, `you are not logged out:no connection!`));\r\n      }\r\n    } finally {\r\n      dispatch(setStatusAC(false));\r\n    }\r\n  };\r\n\r\nexport const deletePackCardsTC =\r\n  (_id: string): AppThunk =>\r\n  async dispatch => {\r\n    dispatch(setStatusAC(true));\r\n    try {\r\n      const cardsPack = await cardsPackAPI.deleteCardsPack(_id);\r\n      dispatch(setPackCardsTC());\r\n      console.log(cardsPack.data);\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error) && error.response) {\r\n        const errorMessage = error.response;\r\n        dispatch(setErrorMessageAC(true, `error: ${errorMessage}`));\r\n      } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\r\n        dispatch(setErrorMessageAC(true, `you are not logged out:no connection!`));\r\n      }\r\n    } finally {\r\n      dispatch(setStatusAC(false));\r\n    }\r\n  };\r\n\r\nexport const updatePackCardsTC =\r\n  (_id: string, name: string): AppThunk =>\r\n  async dispatch => {\r\n    dispatch(setStatusAC(true));\r\n    try {\r\n      const cardsPack = await cardsPackAPI.updatesCardsPack(_id, name);\r\n      dispatch(setPackCardsTC());\r\n      console.log(cardsPack.data);\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error) && error.response) {\r\n        const errorMessage = error.response;\r\n        dispatch(setErrorMessageAC(true, `error: ${errorMessage}`));\r\n      } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\r\n        dispatch(setErrorMessageAC(true, `you are not logged out:no connection!`));\r\n      }\r\n    } finally {\r\n      dispatch(setStatusAC(false));\r\n    }\r\n  };\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { instance } from './instance';\r\nimport { cardsAddType, cardsRequestType, cardsResponseType } from './types/cardsType';\r\n\r\nexport const cardsAPI = {\r\n  // getCardsList(PackId: string, page: number) {\r\n  //   return instance.get<cardsRequestType, AxiosResponse<cardsResponseType>>(\r\n  //     `cards/card?cardsPack_id=${PackId}&page=${page}&pageCount=4`,\r\n  //   );\r\n  // },\r\n  getCardsList(cardsData: cardsRequestType) {\r\n    return instance.get<cardsRequestType, AxiosResponse<cardsResponseType>>(\r\n      `cards/card`,\r\n      { params: cardsData },\r\n    );\r\n  },\r\n  addCard(newCard: cardsAddType) {\r\n    return instance.post<cardsAddType, any>(`cards/card`, { card: newCard });\r\n  },\r\n  deleteCard(cardId: string) {\r\n    return instance.delete<string, any>(`cards/card?id=${cardId}`);\r\n  },\r\n  updateCard(_id: string, question: string) {\r\n    return instance.put<{ _id: string; question: string }, any>(`cards/card`, {\r\n      card: { _id, question },\r\n    });\r\n  },\r\n};\r\n","/* eslint-disable prettier/prettier */\r\nimport { cardsAPI } from '../../m3-dal/cards-api';\r\nimport { setStatusAC } from '../actions/app-actions';\r\nimport { setCardsData } from '../actions/cards-actions';\r\nimport { AppThunk } from '../store';\r\n\r\nimport { cardsAddType } from 'a1-main/m3-dal/types/cardsType';\r\n\r\n// export const getCards =\r\n//   (PackId: string, page: number): AppThunk =>\r\n//   async dispatch => {\r\n//     try {\r\n//       // eslint-disable-next-line camelcase\r\n//       const response = await cardsAPI.getCardsList(PackId, page);\r\n//       dispatch(setCardsData(response.data));\r\n//     } catch (error: any) {\r\n//       console.log(error);\r\n//     }\r\n//   };\r\nexport const getCards =\r\n  // eslint-disable-next-line camelcase\r\n    (cardsPack_id: string): AppThunk =>\r\n    async (dispatch, getState) => {\r\n      const { sortCards, page, pageCount } = getState().cards;\r\n      try {\r\n        // eslint-disable-next-line camelcase\r\n        const response = await cardsAPI.getCardsList({\r\n          cardsPack_id,\r\n          sortCards,\r\n          page,\r\n          pageCount,\r\n        });\r\n        dispatch(setCardsData(response.data));\r\n      } catch (error: any) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\nexport const addNewCard =\r\n  (newCard: cardsAddType): AppThunk =>\r\n  async dispatch => {\r\n    dispatch(setStatusAC(true));\r\n    try {\r\n      await cardsAPI.addCard(newCard);\r\n      dispatch(getCards(newCard.cardsPack_id));\r\n    } catch (error: any) {\r\n      console.log(error);\r\n    } finally {\r\n      dispatch(setStatusAC(false));\r\n    }\r\n  };\r\n\r\nexport const deleteCard =\r\n  (cardId: string, packId: string): AppThunk =>\r\n  async dispatch => {\r\n    dispatch(setStatusAC(true));\r\n    try {\r\n      await cardsAPI.deleteCard(cardId);\r\n      dispatch(getCards(packId));\r\n    } catch (error: any) {\r\n      console.log(error);\r\n    } finally {\r\n      dispatch(setStatusAC(false));\r\n    }\r\n  };\r\n\r\nexport const updateCardData =\r\n  (cardId: string, question: string, packId: string): AppThunk =>\r\n  async dispatch => {\r\n    dispatch(setStatusAC(true));\r\n    try {\r\n      await cardsAPI.updateCard(cardId, question);\r\n      dispatch(getCards(packId));\r\n    } catch (error: any) {\r\n      console.log(error);\r\n    } finally {\r\n      dispatch(setStatusAC(false));\r\n    }\r\n  };\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport { Loader } from './common/Loader';\r\nimport { Pagination } from './Pagination/Pagination';\r\nimport { UniversalTable } from './UniversalTable';\r\n\r\nimport { setCurrentCardPage, SortCardData } from 'a1-main/m2-bll/actions/cards-actions';\r\nimport { AppRootState } from 'a1-main/m2-bll/store';\r\nimport {\r\n  addNewCard,\r\n  deleteCard,\r\n  getCards,\r\n  updateCardData,\r\n} from 'a1-main/m2-bll/thunks/cards-thunk';\r\nimport { cardsType } from 'a1-main/m3-dal/types/cardsType';\r\nimport { PORTION_SIZE } from 'constants/common';\r\nimport s from 'styles/Cards.module.css';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport const CardsTable = (): ReturnComponentType => {\r\n  const status = useSelector<AppRootState, boolean>(state => state.app.status);\r\n  const cards = useSelector<AppRootState, cardsType[]>(state => state.cards.cards);\r\n  const cardsTotalCount = useSelector<AppRootState, number>(\r\n    state => state.cards.cardsTotalCount,\r\n  );\r\n  const page = useSelector<AppRootState, number>(state => state.cards.page);\r\n  const pageCount = useSelector<AppRootState, number>(state => state.cards.pageCount);\r\n  const sortCards = useSelector<AppRootState, string>(state => state.cards.sortCards);\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n  const packId = location.state;\r\n  const cardsHeaders = {\r\n    question: 'question',\r\n    answer: 'answer',\r\n    grade: 'grade',\r\n    updated: 'updated',\r\n  };\r\n  const newCard = {\r\n    cardsPack_id: packId,\r\n    question: '[1,2,3] + 1 =?',\r\n    answer: '1,2,31',\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getCards(packId));\r\n  }, [sortCards]);\r\n  const handleSortCards = (value: string): void => {\r\n    dispatch(SortCardData(value));\r\n  };\r\n\r\n  const handleAddCard = (): void => {\r\n    dispatch(addNewCard(newCard));\r\n  };\r\n  const handleDeleteCard = (cardId: string): void => {\r\n    dispatch(deleteCard(cardId, packId));\r\n  };\r\n  const handleUpdateCard = (cardId: string, question: string): void => {\r\n    dispatch(updateCardData(cardId, question, packId));\r\n  };\r\n  const onPageChanged = (pageNumber: number): void => {\r\n    dispatch(setCurrentCardPage(pageNumber));\r\n    dispatch(getCards(packId));\r\n  };\r\n\r\n  return (\r\n    <div className={s.CardsContainer}>\r\n      <div className={s.CardsBlock}>\r\n        <h1 className={s.titleCardsBlock}>Playing Cards</h1>\r\n        <div className={s.loader}>{status && <Loader />}</div>\r\n        <UniversalTable\r\n          items={cards}\r\n          headers={cardsHeaders}\r\n          deleteItem={handleDeleteCard}\r\n          updateItem={handleUpdateCard}\r\n          sortFunction={handleSortCards}\r\n          addBlock={handleAddCard}\r\n        />\r\n        <Pagination\r\n          totalItemsCount={cardsTotalCount} // это количество всех колод\r\n          currentPage={page}\r\n          onPageChanged={onPageChanged}\r\n          pageSize={pageCount} // это количество колод на странице\r\n          portionSize={PORTION_SIZE} // это количество страниц в блоке перемотки\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { NavLink } from 'react-router-dom';\n\nimport { PATH } from 'enums/routes';\nimport style from 'styles/ErrorPage.module.css';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const Error404 = (): ReturnComponentType => (\n  <div className={style.errorPage}>\n    <div className={style.errorTitle}>\n      <h1>\n        4<span className={style.errorImg} />4\n      </h1>\n    </div>\n    <div className={style.errorSign}>OOPS! PAGE NOT BE FOUND</div>\n    <div>\n      <p>\n        Sorry but the page you are looking for does not exist, have been removed, name\n        changed or is temporarily unavailable\n      </p>\n    </div>\n    <div>\n      <NavLink to={PATH.PROFILE} className={style.errorButton}>\n        Back to homepage\n      </NavLink>\n    </div>\n  </div>\n);\n","import React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { Outlet } from 'react-router-dom';\r\n\r\nimport s from '../../../../styles/App.module.css';\r\nimport { ReturnComponentType } from '../../../../types/ReturnComponentType';\r\nimport { AppRootState } from '../../../m2-bll/store';\r\n\r\nimport { Loader } from './Loader';\r\n\r\nexport const LoginForm = (): ReturnComponentType => {\r\n  const status = useSelector<AppRootState, boolean>(state => state.app.status);\r\n  return (\r\n    <div className={s.loginBlock}>\r\n      <h1 className={s.titleBlock}>Plaing Cards</h1>\r\n      <div className={s.loader}>{status && <Loader />}</div>\r\n      <Outlet />\r\n    </div>\r\n  );\r\n};\r\n","import { instance } from './instance';\r\n\r\nexport const cardsPackAPI = {\r\n  readCardsPack(sortPacks: string, pageCount?: number, page?: number) {\r\n    return instance.get<any>(`cards/pack`, {\r\n      params: { sortPacks, pageCount, page },\r\n    });\r\n  },\r\n  createCardsPack(newPack: string) {\r\n    return instance.post<any>(`cards/pack`, { cardsPack: { name: newPack } });\r\n  },\r\n  deleteCardsPack(packId: string) {\r\n    return instance.delete<any>(`cards/pack/?id=${packId}`);\r\n  },\r\n  updatesCardsPack(_id: string, newName: string) {\r\n    return instance.put<any>(`cards/pack`, { cardsPack: { _id, name: newName } });\r\n  },\r\n};\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { instance } from 'a1-main/m3-dal/instance';\r\n\r\nexport const searchApi = {\r\n  searchPacks(\r\n    searchRequest: string,\r\n    sortPacks: string,\r\n    pageCount: number,\r\n    page: number,\r\n    minFilter?: number,\r\n    maxFilter?: number,\r\n  ) {\r\n    return instance.get<any, AxiosResponse<any>>(\r\n      `cards/pack?packName=${searchRequest}&sortPacks=${sortPacks}&page=${page}&pageCount=${pageCount}&min=${minFilter}&max=${maxFilter}`,\r\n    );\r\n  },\r\n};\r\n","export enum ACTIONS_TYPE {\n  SET_REGISTER_STATUS = 'register-reducer/SET_REGISTER_STATUS',\n}\n\ntype SetRegisterStatusActionType = ReturnType<typeof setRegisterStatus>;\n\nexport type RegisterActionType = SetRegisterStatusActionType;\n\nexport const setRegisterStatus = (registerStatus: boolean) =>\n  ({\n    type: ACTIONS_TYPE.SET_REGISTER_STATUS,\n    registerStatus,\n  } as const);\n","import { searchApi } from '../../m3-dal/search-api';\r\nimport { setStatusAC } from '../actions/app-actions';\r\nimport {\r\n  setCardsPackTotalCountAC,\r\n  setPackCardsAC,\r\n  setSearchText,\r\n} from '../reducers/cardspack-reducer';\r\nimport { AppThunk } from '../store';\r\n\r\nexport const searchPacks =\r\n  (\r\n    searchRequest: string,\r\n    sortPacks: string,\r\n    pageCount: number,\r\n    page: number,\r\n    minFilter?: number,\r\n    maxFilter?: number,\r\n  ): AppThunk =>\r\n  async dispatch => {\r\n    dispatch(setStatusAC(true));\r\n    try {\r\n      const response = await searchApi.searchPacks(\r\n        searchRequest,\r\n        sortPacks,\r\n        pageCount,\r\n        page,\r\n        minFilter,\r\n        maxFilter,\r\n      );\r\n      dispatch(setSearchText(searchRequest));\r\n      dispatch(setCardsPackTotalCountAC(response.data.cardPacksTotalCount));\r\n      dispatch(setPackCardsAC(response.data.cardPacks));\r\n    } catch (error) {\r\n      console.log(`Error search: ${error}`);\r\n    } finally {\r\n      dispatch(setStatusAC(false));\r\n    }\r\n  };\r\n","import React, { FormEvent, useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { AppRootState } from '../../m2-bll/store';\r\nimport { searchPacks } from '../../m2-bll/thunks/search-thunk';\r\n\r\nimport { Button } from './common/CustomButton/Button';\r\nimport { Input } from './common/CustomInput/Input';\r\n\r\nimport { EMPTY_STRING, SEARCH } from 'constants/common';\r\nimport s from 'styles/search.module.css';\r\n\r\nexport const Search = (): any => {\r\n  const dispatch = useDispatch();\r\n  const isFetching = useSelector<AppRootState, boolean>(state => state.app.isFetching);\r\n  const sortPacks = useSelector<AppRootState, string>(state => state.cardspack.sortPacks);\r\n  const pageCount = useSelector<AppRootState, number>(state => state.cardspack.pageCount);\r\n  const page = useSelector<AppRootState, number>(state => state.cardspack.page);\r\n  const minFilter = useSelector<AppRootState, number>(state => state.cardspack.minFilter);\r\n  const maxFilter = useSelector<AppRootState, number>(state => state.cardspack.maxFilter);\r\n  const [searchText, setSearchText] = useState<string>(EMPTY_STRING);\r\n  const handleSubmit = (e: FormEvent<HTMLFormElement>): any => {\r\n    e.preventDefault();\r\n    dispatch(searchPacks(searchText, sortPacks, pageCount, page, minFilter, maxFilter));\r\n  };\r\n\r\n  const handleSearchValueChange = (value: string): void => {\r\n    setSearchText(value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.container}>\r\n      <Input\r\n        type=\"text\"\r\n        title={SEARCH}\r\n        placeholder=\"Search...\"\r\n        onChangeText={(currentValue: string) => {\r\n          handleSearchValueChange(currentValue);\r\n        }}\r\n        value={searchText}\r\n      />\r\n      <Button type=\"submit\" condition={isFetching} className={s.buttonContainer}>\r\n        Search\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport 'styles/DoubleRangeSlider.css';\r\nimport 'nouislider/dist/nouislider.css';\r\nimport Nouislider from 'nouislider-react';\r\n\r\nimport { FIRST_ELEMENT, SECOND_ELEMENT } from 'constants/common';\r\n\r\ntype MapDispatchToPropsType = {\r\n  onUpdate: (value: [number, number]) => void;\r\n  onChange: (values: any) => void;\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n  startValues: [number, number];\r\n  min: number;\r\n  max: number;\r\n  step: number;\r\n  value1: number;\r\n  value2: number;\r\n  disable: boolean;\r\n};\r\n\r\nexport type SuperDoubleRangePropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\ntype StateType = {\r\n  start: number[];\r\n};\r\n\r\nexport class DoubleRangeSlider extends React.Component<\r\n  SuperDoubleRangePropsType,\r\n  StateType\r\n> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      start: props.startValues,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<SuperDoubleRangePropsType>): any {\r\n    const { value1 } = this.props;\r\n    if (value1 !== prevProps.value1) {\r\n      // eslint-disable-next-line react/no-did-update-set-state\r\n      this.setState({\r\n        start: [value1, prevProps.value2],\r\n      });\r\n    }\r\n  }\r\n\r\n  onUpdate = (values: any[], handle: number, unencodedValues: number[]): any => {\r\n    const { onUpdate } = this.props;\r\n    onUpdate([unencodedValues[FIRST_ELEMENT], unencodedValues[SECOND_ELEMENT]]);\r\n  };\r\n\r\n  render(): any {\r\n    const { min, max, step, disable, onChange } = this.props;\r\n    const { start } = this.state;\r\n    return (\r\n      <span className=\"doubleRangeSliderRangeContainer\">\r\n        <Nouislider\r\n          range={{ min, max }}\r\n          start={start}\r\n          step={step}\r\n          disabled={disable}\r\n          onUpdate={this.onUpdate}\r\n          onChange={onChange}\r\n          animate={false}\r\n          connect\r\n          tooltips={[\r\n            {\r\n              to(value: number) {\r\n                return Math.round(value);\r\n              },\r\n              from(value: number) {\r\n                return Math.round(value);\r\n              },\r\n            },\r\n            {\r\n              to(value: number) {\r\n                return Math.round(value);\r\n              },\r\n              from(value: number) {\r\n                return Math.round(value);\r\n              },\r\n            },\r\n          ]}\r\n        />\r\n      </span>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { setMaxFilter, setMinFilter } from '../../m2-bll/reducers/cardspack-reducer';\r\n\r\nimport { DoubleRangeSlider } from './common/DoubleRangeSlider/DoubleRangeSlider';\r\n\r\nimport { AppRootState } from 'a1-main/m2-bll/store';\r\nimport { FIRST_ELEMENT, SECOND_ELEMENT } from 'constants/common';\r\nimport s from 'styles/SelectingSidebar.module.css';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport const SelectingSidebar = (): ReturnComponentType => {\r\n  const dispatch = useDispatch();\r\n  const min = useSelector<AppRootState, number>(state => state.cardspack.minCardsCount);\r\n  const max = useSelector<AppRootState, number>(state => state.cardspack.maxCardsCount);\r\n  const minFilter = useSelector<AppRootState, number>(state => state.cardspack.minFilter);\r\n  const maxFilter = useSelector<AppRootState, number>(state => state.cardspack.maxFilter);\r\n  const appStatus = useSelector<AppRootState, boolean>(state => state.app.status);\r\n  const [value1, setValue1] = useState<number>(min);\r\n  const [value2, setValue2] = useState<number>(max);\r\n\r\n  const onUpdate = (values: [number, number]): void => {\r\n    setValue1(values[FIRST_ELEMENT]);\r\n    setValue2(values[SECOND_ELEMENT]);\r\n  };\r\n\r\n  const onChange = (values: [number, number]): void => {\r\n    dispatch(setMinFilter(Math.round(Number(values[FIRST_ELEMENT]))));\r\n    dispatch(setMaxFilter(Math.round(Number(values[SECOND_ELEMENT]))));\r\n  };\r\n\r\n  return (\r\n    <div className={s.SelectingSidebarContainer}>\r\n      <div className={s.profile}>\r\n        <div className={s.userAvatarContainer}>\r\n          <div className={s.userAvatar} />\r\n        </div>\r\n        <div className={s.userName}>User name</div>\r\n        <div className={s.userJobTitle}>User job title</div>\r\n      </div>\r\n      <div className={s.descriptionForDoubleRangeSlider}>Cards count in a pack</div>\r\n      {!appStatus && (\r\n        <div className={s.DoubleRangeSliderContainer}>\r\n          <DoubleRangeSlider\r\n            startValues={[minFilter, maxFilter]}\r\n            min={min}\r\n            max={max}\r\n            step={1}\r\n            disable={appStatus}\r\n            value1={value1}\r\n            value2={value2}\r\n            onUpdate={onUpdate}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n  createPackCardsTC,\r\n  deletePackCardsTC,\r\n  PacksType,\r\n  setCurrentPageAC,\r\n  setMaxCardsCount,\r\n  setMaxFilter,\r\n  setMinCardsCount,\r\n  setMinFilter,\r\n  setPackCardsTC,\r\n  setSearchText,\r\n  SortPackCardsAC,\r\n  updatePackCardsTC,\r\n} from '../../m2-bll/reducers/cardspack-reducer';\r\nimport { AppRootState } from '../../m2-bll/store';\r\nimport { searchPacks } from '../../m2-bll/thunks/search-thunk';\r\n\r\nimport { Loader } from './common/Loader';\r\nimport { Pagination } from './Pagination/Pagination';\r\nimport { Search } from './Search';\r\nimport { SelectingSidebar } from './SelectingSidebar';\r\nimport { UniversalTable } from './UniversalTable';\r\n\r\nimport { EMPTY_STRING, BUTTON_CARDS } from 'constants/common';\r\nimport s from 'styles/Cards.module.css';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport const PacksCardsTable = (): ReturnComponentType => {\r\n  const status = useSelector<AppRootState, boolean>(state => state.app.status);\r\n  const packCards = useSelector<AppRootState, Array<PacksType>>(\r\n    state => state.cardspack.cardPacks,\r\n  );\r\n  const sortPack = useSelector<AppRootState, string>(state => state.cardspack.sortPacks);\r\n  const dispatch = useDispatch();\r\n\r\n  const cardPacksTotalCount = useSelector<AppRootState, number>(\r\n    state => state.cardspack.cardPacksTotalCount,\r\n  );\r\n  const one = 1;\r\n  const initialSortValue = '0updated';\r\n  const page = useSelector<AppRootState, number>(state => state.cardspack.page);\r\n  const pageCount = useSelector<AppRootState, number>(state => state.cardspack.pageCount);\r\n  const portionSize = useSelector<AppRootState, number>(\r\n    state => state.cardspack.portionSize,\r\n  );\r\n  const searchText = useSelector<AppRootState, string>(\r\n    state => state.cardspack.searchText,\r\n  );\r\n  const onPageChanged = (pageNumber: number): void => {\r\n    dispatch(setCurrentPageAC(pageNumber));\r\n    if (!searchText) {\r\n      dispatch(setPackCardsTC());\r\n    } else {\r\n      dispatch(searchPacks(searchText, sortPack, pageCount, pageNumber));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!searchText) {\r\n      dispatch(setPackCardsTC());\r\n    } else {\r\n      dispatch(searchPacks(searchText, sortPack, pageCount, one));\r\n    }\r\n  }, [sortPack]);\r\n\r\n  useEffect(\r\n    () => () => {\r\n      const zero = 0;\r\n      dispatch(setSearchText(EMPTY_STRING));\r\n      dispatch(setCurrentPageAC(one));\r\n      dispatch(setMinCardsCount(zero));\r\n      dispatch(setMaxCardsCount(zero));\r\n      dispatch(setMinFilter(zero));\r\n      dispatch(setMaxFilter(zero));\r\n      dispatch(SortPackCardsAC(initialSortValue));\r\n    },\r\n    [],\r\n  );\r\n\r\n  const packHeaders = {\r\n    user_name: 'writer',\r\n    name: 'name',\r\n    cardsCount: 'cards',\r\n    updated: 'updated',\r\n    rating: 'rating',\r\n  };\r\n  const addPackCards = (): void => {\r\n    dispatch(createPackCardsTC('lakdlakfaldkad'));\r\n  };\r\n  const sortPackCards = (value: string): void => {\r\n    dispatch(SortPackCardsAC(value));\r\n  };\r\n  const deletePack = (id: string): void => {\r\n    dispatch(deletePackCardsTC(id));\r\n  };\r\n  const updatePack = (id: string, title: string): void => {\r\n    dispatch(updatePackCardsTC(id, title));\r\n  };\r\n\r\n  return (\r\n    <div className={s.CardsContainer}>\r\n      <SelectingSidebar />\r\n      <div className={s.CardsBlock}>\r\n        <h1 className={s.titleCardsBlock}>Packs list</h1>\r\n        <div className={s.loader}>{status && <Loader />}</div>\r\n        <Search />\r\n        <UniversalTable\r\n          items={packCards}\r\n          headers={packHeaders}\r\n          deleteItem={deletePack}\r\n          updateItem={updatePack}\r\n          sortFunction={sortPackCards}\r\n          addBlock={addPackCards}\r\n          extraButton={BUTTON_CARDS}\r\n        />\r\n        <Pagination\r\n          totalItemsCount={cardPacksTotalCount}\r\n          currentPage={page}\r\n          onPageChanged={onPageChanged}\r\n          pageSize={pageCount}\r\n          portionSize={portionSize}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nimport { PATH } from '../../../enums/routes';\r\nimport s from '../../../styles/Cards.module.css';\r\n\r\nimport { AppRootState } from 'a1-main/m2-bll/store';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport const Profile = (): ReturnComponentType => {\r\n  const AuthUserStatus = useSelector<AppRootState, boolean>(state => state.auth.isAuth);\r\n\r\n  if (!AuthUserStatus) return <Navigate to={PATH.LOGIN_FORM} />;\r\n\r\n  return (\r\n    <div className={s.CardsContainer}>\r\n      <div className={s.CardsBlock}>\r\n        <h1 className={s.titleCardsBlock}>My Packs list</h1>\r\n        {/* <div className={s.loader}>{status && <Loader />}</div> */}\r\n        {/* <UniversalTable */}\r\n        {/*  items={cards} */}\r\n        {/*  headers={cardsHeaders} */}\r\n        {/*  deleteItem={handleDeleteCard} */}\r\n        {/*  updateItem={handleUpdateCard} */}\r\n        {/*  sortFunction={() => {}} */}\r\n        {/*  addBlock={handleAddCard} */}\r\n        {/* /> */}\r\n        {/* <Pagination */}\r\n        {/*  totalItemsCount={cardsTotalCount} // это количество всех колод */}\r\n        {/*  currentPage={page} */}\r\n        {/*  onPageChanged={onPageChanged} */}\r\n        {/*  pageSize={pageCount} // это количество колод на странице */}\r\n        {/*  portionSize={PORTION_SIZE} // это количество страниц в блоке перемотки */}\r\n        {/* /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Button } from './common/CustomButton/Button';\r\nimport { Checkbox } from './common/CustomCheckBox/CheckBox';\r\nimport { Input } from './common/CustomInput/Input';\r\n\r\nimport { PASSWORD, EMAIL } from 'constants/common';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport const TestComponent = (): ReturnComponentType => (\r\n  <div>\r\n    <Input\r\n      title={EMAIL}\r\n      // onChangeText={setText}\r\n      // onEnter={showAlert}\r\n      // error={error}\r\n      // spanClassName={s.testSpanError}\r\n      //  value={value}\r\n    />\r\n    <Input title={PASSWORD} />\r\n    <div>\r\n      <Checkbox>Remember me</Checkbox>\r\n    </div>\r\n    <div>\r\n      <Button>Нажми</Button>\r\n    </div>\r\n  </div>\r\n);\r\n","export type initialProfileStateType = any;\n\nconst initialProfileState: initialProfileStateType = {};\n\nexport const profileReducer = (\n  state: initialProfileStateType = initialProfileState,\n  action: any,\n): initialProfileStateType => {\n  switch (action.type) {\n    // case ACTIONS_TYPE.GET_PROFILE_DATA:\n    default:\n      return state;\n  }\n};\n\n// образец типов экшена\n\nexport enum ACTIONS_TYPE {\n  GET_PROFILE_DATA = 'profile-reducer/GET_PROFILE_DATA',\n}\n","import { AxiosResponse } from 'axios';\n\nimport { instance } from './instance';\nimport { credentialsType } from './types/registerType';\n\nexport const registerAPI = {\n  signUp(credentials: credentialsType) {\n    return instance.post<credentialsType, AxiosResponse<any>>(\n      `auth/register`,\n      credentials,\n    );\n  },\n};\n","import React, { FormEvent, useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navigate, NavLink } from 'react-router-dom';\r\n\r\nimport style from '../../styles/Login.module.css';\r\n\r\nimport { Button } from 'a1-main/m1-ui/components/common/CustomButton/Button';\r\nimport { Input } from 'a1-main/m1-ui/components/common/CustomInput/Input';\r\nimport { AppRootState } from 'a1-main/m2-bll/store';\r\nimport { toSignUp } from 'a1-main/m2-bll/thunks/register-thunk';\r\nimport { credentialsType } from 'a1-main/m3-dal/types/registerType';\r\nimport {\r\n  CONFIRM_PASSWORD,\r\n  emailValidator,\r\n  EMPTY_STRING,\r\n  PASSWORD,\r\n  EMAIL,\r\n  ZERO_LENGTH,\r\n} from 'constants/common';\r\nimport { PATH } from 'enums/routes';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport const Register = (): ReturnComponentType => {\r\n  const passwordMinLength = 7;\r\n  const errorEmailValidation = 'Email is incorrect';\r\n  const errorEmailRequired = 'Email is required';\r\n  const errorPasswordRequired = 'Password is required';\r\n  const errorPasswordValidationMinLength = 'Password must be at least 7 characters';\r\n  const errorPasswordConfirmValidation = 'Passwords mismatch';\r\n  const [passwordError, setPasswordError] = useState<string>(EMPTY_STRING);\r\n  const [passwordConfirmError, setPasswordConfirmError] = useState<string>(EMPTY_STRING);\r\n  const [email, setEmail] = useState<string>(EMPTY_STRING);\r\n  const [emailError, setEmailError] = useState<string>(EMPTY_STRING);\r\n  const [password, setPassword] = useState<string>(EMPTY_STRING);\r\n  const [passwordConfirm, setPasswordConfirm] = useState<string>(EMPTY_STRING);\r\n  const signUpStatus = useSelector<AppRootState, boolean>(\r\n    state => state.register.signUpStatus,\r\n  );\r\n  const isFetching = useSelector<AppRootState, boolean>(state => state.app.isFetching);\r\n  const dispatch = useDispatch();\r\n\r\n  const credentials: credentialsType = { email, password };\r\n  const handleSubmit = (e: FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault();\r\n    if (\r\n      email.length === ZERO_LENGTH &&\r\n      password.length === ZERO_LENGTH &&\r\n      passwordConfirm.length === ZERO_LENGTH\r\n    ) {\r\n      setEmailError(errorEmailRequired);\r\n      setPasswordError(errorPasswordRequired);\r\n      setPasswordConfirmError(errorPasswordRequired);\r\n      return;\r\n    }\r\n\r\n    if (email.length === ZERO_LENGTH) {\r\n      setEmailError(errorEmailRequired);\r\n    }\r\n    if (email.match(emailValidator) === null && email.length > ZERO_LENGTH) {\r\n      setEmailError(errorEmailValidation);\r\n    }\r\n    if (email.match(emailValidator)) {\r\n      setEmailError(EMPTY_STRING);\r\n    }\r\n\r\n    if (password.length === ZERO_LENGTH) {\r\n      setPasswordError(errorPasswordRequired);\r\n    }\r\n    if (password.length < passwordMinLength && password.length > ZERO_LENGTH) {\r\n      setPasswordError(errorPasswordValidationMinLength);\r\n    }\r\n    if (password.length >= passwordMinLength) {\r\n      setPasswordError(EMPTY_STRING);\r\n    }\r\n\r\n    if (passwordConfirm.length === ZERO_LENGTH) {\r\n      setPasswordConfirmError(errorPasswordRequired);\r\n    }\r\n    if (\r\n      passwordConfirm.length < passwordMinLength &&\r\n      passwordConfirm.length > ZERO_LENGTH\r\n    ) {\r\n      setPasswordConfirmError(errorPasswordValidationMinLength);\r\n    }\r\n    if (passwordConfirm.length >= passwordMinLength) {\r\n      setPasswordConfirmError(EMPTY_STRING);\r\n    }\r\n\r\n    if (passwordConfirm.length === ZERO_LENGTH) {\r\n      setPasswordConfirmError(errorPasswordRequired);\r\n      return;\r\n    }\r\n    if (\r\n      passwordConfirm.length < passwordMinLength &&\r\n      passwordConfirm.length > ZERO_LENGTH\r\n    ) {\r\n      setPasswordConfirmError(errorPasswordValidationMinLength);\r\n    }\r\n    if (\r\n      password !== passwordConfirm &&\r\n      password.length !== ZERO_LENGTH &&\r\n      passwordConfirm.length !== ZERO_LENGTH\r\n    ) {\r\n      setPasswordConfirmError(errorPasswordConfirmValidation);\r\n      return;\r\n    }\r\n\r\n    if (\r\n      email.match(emailValidator) &&\r\n      password.length >= passwordMinLength &&\r\n      passwordConfirm.length >= passwordMinLength &&\r\n      password === passwordConfirm\r\n    ) {\r\n      setEmailError(EMPTY_STRING);\r\n      setPasswordError(EMPTY_STRING);\r\n      setPasswordConfirmError(EMPTY_STRING);\r\n      dispatch(toSignUp(credentials));\r\n    }\r\n  };\r\n  if (signUpStatus) return <Navigate to={PATH.LOGIN} />;\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <Input\r\n          title={EMAIL}\r\n          placeholder=\"Email\"\r\n          onChangeText={setEmail}\r\n          value={email}\r\n          type=\"email\"\r\n          // onEnter={showAlert}\r\n          // error={error}\r\n          // spanClassName={s.testSpanError}\r\n        />\r\n        {emailError && (\r\n          <div>\r\n            <span className={style.errorText}>{emailError}</span>\r\n          </div>\r\n        )}\r\n        <Input\r\n          title={PASSWORD}\r\n          placeholder=\"Password\"\r\n          onChangeText={setPassword}\r\n          value={password}\r\n          type=\"password\"\r\n        />\r\n        {passwordError && (\r\n          <div>\r\n            <span className={style.errorText}>{passwordError}</span>\r\n          </div>\r\n        )}\r\n        <Input\r\n          title={CONFIRM_PASSWORD}\r\n          placeholder=\"Password\"\r\n          onChangeText={setPasswordConfirm}\r\n          value={passwordConfirm}\r\n          type=\"password\"\r\n        />\r\n        {passwordConfirmError && (\r\n          <div>\r\n            <span className={style.errorText}>{passwordConfirmError}</span>\r\n          </div>\r\n        )}\r\n        <div>\r\n          <Button condition={isFetching} type=\"submit\">\r\n            Register\r\n          </Button>\r\n        </div>\r\n        <div className={style.forgotblock}>\r\n          <NavLink to={PATH.LOGIN_FORM} className={style.forgotPassword}>\r\n            I can login\r\n          </NavLink>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import axios from 'axios';\r\n\r\nimport { credentialsType } from '../../m3-dal/types/registerType';\r\nimport { setErrorMessageAC, setStatusAC } from '../actions/app-actions';\r\nimport { setRegisterStatus } from '../actions/register-actions';\r\nimport { AppThunk } from '../store';\r\n\r\nimport { registerAPI } from 'a1-main/m3-dal/register-api';\r\n\r\nexport const toSignUp =\r\n  (credentials: credentialsType): AppThunk =>\r\n  async dispatch => {\r\n    dispatch(setStatusAC(true));\r\n    try {\r\n      await registerAPI.signUp(credentials);\r\n      dispatch(setRegisterStatus(true));\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error) && error.response) {\r\n        const errorMessage = error.response.data.error;\r\n        dispatch(setErrorMessageAC(true, `registration failed! ${errorMessage}`));\r\n      } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\r\n        dispatch(setErrorMessageAC(true, `no connection!`));\r\n      }\r\n    } finally {\r\n      dispatch(setStatusAC(false));\r\n    }\r\n  };\r\n","import { ReamePasswordType } from '../../a2-features/f3/NewPassword';\nimport { LetterType } from '../../a2-features/f3/RecoveryPassword';\n\nimport { instance } from './instance';\n\nexport const passwordAPI = {\n  sendMessage(letterToThePost: LetterType) {\n    return instance.post<any>(`auth/forgot`, letterToThePost);\n  },\n  updatePassword(newPassword: ReamePasswordType) {\n    return instance.post<any>(`/auth/set-new-password`, newPassword);\n  },\n};\n","import React, { FormEvent, useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nimport { Button } from '../../a1-main/m1-ui/components/common/CustomButton/Button';\r\nimport { Input } from '../../a1-main/m1-ui/components/common/CustomInput/Input';\r\nimport { AppRootState } from '../../a1-main/m2-bll/store';\r\nimport { renamePasswordTC } from '../../a1-main/m2-bll/thunks/password-thunk';\r\nimport {\r\n  CONFIRM_PASSWORD,\r\n  EMPTY_STRING,\r\n  PASSWORD,\r\n  ZERO_LENGTH,\r\n} from '../../constants/common';\r\nimport { PATH } from '../../enums/routes';\r\nimport style from '../../styles/Login.module.css';\r\n\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport type ReamePasswordType = {\r\n  password: string;\r\n  resetPasswordToken: string;\r\n};\r\n\r\nexport const NewPassword = (): ReturnComponentType => {\r\n  const [password, setPassword] = useState<string>(EMPTY_STRING);\r\n  const [passwordConfirm, setPasswordConfirm] = useState<string>(EMPTY_STRING);\r\n  const passwordMinLength = 7;\r\n  const errorPasswordRequired = 'Password is required';\r\n  const errorPasswordValidationMinLength = 'Password must be at least 7 characters';\r\n  const errorPasswordConfirmValidation = 'Passwords mismatch';\r\n  const [passwordError, setPasswordError] = useState<string>(EMPTY_STRING);\r\n  const [passwordConfirmError, setPasswordConfirmError] = useState<string>(EMPTY_STRING);\r\n  const passwordRename = useSelector<AppRootState, boolean>(\r\n    state => state.password.passwordRename,\r\n  );\r\n  const isFetching = useSelector<AppRootState, boolean>(state => state.app.isFetching);\r\n  const dispatch = useDispatch();\r\n\r\n  const { token } = useParams<string>();\r\n  const newPassword: ReamePasswordType = {\r\n    password,\r\n    resetPasswordToken: token || '',\r\n  };\r\n\r\n  const handlePasswordValueChange = (passwordValue: string): void => {\r\n    setPassword(passwordValue);\r\n    if (passwordError) {\r\n      setPasswordError(EMPTY_STRING);\r\n    }\r\n  };\r\n\r\n  const handlePasswordConfirmValueChange = (passwordConfirmValue: string): void => {\r\n    setPasswordConfirm(passwordConfirmValue);\r\n    if (passwordConfirmError) {\r\n      setPasswordConfirmError(EMPTY_STRING);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault();\r\n    if (password.length === ZERO_LENGTH) {\r\n      setPasswordError(errorPasswordRequired);\r\n    }\r\n    if (password.length < passwordMinLength && password.length > ZERO_LENGTH) {\r\n      setPasswordError(errorPasswordValidationMinLength);\r\n    }\r\n\r\n    if (passwordConfirm.length === ZERO_LENGTH) {\r\n      setPasswordConfirmError(errorPasswordRequired);\r\n    }\r\n    if (\r\n      passwordConfirm.length < passwordMinLength &&\r\n      passwordConfirm.length > ZERO_LENGTH\r\n    ) {\r\n      setPasswordConfirmError(errorPasswordValidationMinLength);\r\n    }\r\n\r\n    if (password !== passwordConfirm) {\r\n      setPasswordConfirmError(errorPasswordConfirmValidation);\r\n    }\r\n    if (\r\n      password.length >= passwordMinLength &&\r\n      passwordConfirm.length >= passwordMinLength &&\r\n      password === passwordConfirm\r\n    ) {\r\n      setPasswordError(EMPTY_STRING);\r\n      setPasswordConfirmError(EMPTY_STRING);\r\n      dispatch(renamePasswordTC(newPassword));\r\n    }\r\n  };\r\n  if (passwordRename) return <Navigate to={PATH.LOGIN_FORM} />;\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <Input\r\n          title={PASSWORD}\r\n          placeholder=\"Password\"\r\n          onChangeText={(passwordValue: string) =>\r\n            handlePasswordValueChange(passwordValue)\r\n          }\r\n          value={password}\r\n          type=\"password\"\r\n        />\r\n        {passwordError && (\r\n          <div>\r\n            <span className={style.errorText}>{passwordError}</span>\r\n          </div>\r\n        )}\r\n        <Input\r\n          title={CONFIRM_PASSWORD}\r\n          placeholder=\"Password\"\r\n          onChangeText={(passwordConfirmValue: string) =>\r\n            handlePasswordConfirmValueChange(passwordConfirmValue)\r\n          }\r\n          value={passwordConfirm}\r\n          type=\"password\"\r\n        />\r\n        {passwordConfirmError && (\r\n          <div>\r\n            <span className={style.errorText}>{passwordConfirmError}</span>\r\n          </div>\r\n        )}\r\n        <div>\r\n          <Button condition={isFetching} type=\"submit\">\r\n            update\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import axios from 'axios';\r\n\r\nimport { ReamePasswordType } from '../../../a2-features/f3/NewPassword';\r\nimport { LetterType } from '../../../a2-features/f3/RecoveryPassword';\r\nimport { passwordAPI } from '../../m3-dal/password-api';\r\nimport { setErrorMessageAC, setStatusAC } from '../actions/app-actions';\r\nimport {\r\n  successRenamePasswordAC,\r\n  successSendMessgeAC,\r\n} from '../actions/password-actions';\r\nimport { AppThunk } from '../store';\r\n\r\nexport const sendMessageOnEmailTC =\r\n  (letterToThePost: LetterType): AppThunk =>\r\n  async dispatch => {\r\n    dispatch(setStatusAC(true));\r\n    try {\r\n      await passwordAPI.sendMessage(letterToThePost);\r\n      dispatch(successSendMessgeAC(true));\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error) && error.response) {\r\n        const errorMessage = error.response.data.error;\r\n        dispatch(setErrorMessageAC(true, `email not sent! ${errorMessage}`));\r\n      } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\r\n        dispatch(setErrorMessageAC(true, `no connection!`));\r\n      }\r\n    } finally {\r\n      dispatch(setStatusAC(false));\r\n    }\r\n  };\r\n\r\nexport const renamePasswordTC =\r\n  (newPassword: ReamePasswordType): AppThunk =>\r\n  async dispatch => {\r\n    dispatch(setStatusAC(true));\r\n    try {\r\n      await passwordAPI.updatePassword(newPassword);\r\n      dispatch(successRenamePasswordAC(true));\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error) && error.response) {\r\n        const errorMessage = error.response.data.error;\r\n        dispatch(\r\n          setErrorMessageAC(\r\n            true,\r\n            `password has not been updated, try again! ${errorMessage}`,\r\n          ),\r\n        );\r\n      } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\r\n        dispatch(setErrorMessageAC(true, `no connection!`));\r\n      }\r\n    } finally {\r\n      dispatch(setStatusAC(false));\r\n    }\r\n  };\r\n","import React, { FormEvent, useEffect, useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { Button } from '../../a1-main/m1-ui/components/common/CustomButton/Button';\r\nimport { Input } from '../../a1-main/m1-ui/components/common/CustomInput/Input';\r\nimport { AppRootState } from '../../a1-main/m2-bll/store';\r\nimport { sendMessageOnEmailTC } from '../../a1-main/m2-bll/thunks/password-thunk';\r\nimport { emailValidator, EMPTY_STRING, EMAIL, ZERO_LENGTH } from '../../constants/common';\r\nimport { PATH } from '../../enums/routes';\r\nimport style from '../../styles/Login.module.css';\r\n\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport type LetterType = {\r\n  email: string;\r\n  from: string;\r\n  message: string;\r\n};\r\n\r\nexport const RecoveryPassword = (): ReturnComponentType => {\r\n  const sendMessageSuccess = useSelector<AppRootState, boolean>(\r\n    state => state.password.sendMessageSuccess,\r\n  );\r\n  const emailForMail = useSelector<AppRootState, string>(state => state.app.email);\r\n  const isFetching = useSelector<AppRootState, boolean>(state => state.app.isFetching);\r\n  const [email, setEmail] = useState<string>(EMPTY_STRING);\r\n  const [emailError, setEmailError] = useState<string>(EMPTY_STRING);\r\n  const [messageSuccess, setMessageSuccess] = useState<boolean>(sendMessageSuccess);\r\n  const errorEmailValidation = 'Email is incorrect';\r\n  const errorEmailRequired = 'Email is required';\r\n\r\n  useEffect(() => {\r\n    setMessageSuccess(sendMessageSuccess);\r\n  }, [sendMessageSuccess]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const letterToThePost: LetterType = {\r\n    email,\r\n    from: 'test-front-admin <ai73a@yandex.by>',\r\n    message: `<div style='background-color: #d6f8f0; padding: 20px'>\r\n'password recovery link': <a href='http://localhost:3000/PlaingCards/new_pass#/new_pass/$token$/'>link</a></div>`,\r\n  };\r\n\r\n  const handleSubmit = (e: FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault();\r\n    if (email.length === ZERO_LENGTH) {\r\n      setEmailError(errorEmailRequired);\r\n      return;\r\n    }\r\n    if (email.match(emailValidator) === null && email.length > ZERO_LENGTH) {\r\n      setEmailError(errorEmailValidation);\r\n      return;\r\n    }\r\n\r\n    if (email.match(emailValidator)) {\r\n      setEmailError(EMPTY_STRING);\r\n      dispatch(sendMessageOnEmailTC(letterToThePost));\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      {messageSuccess ? (\r\n        <div>\r\n          <p>\r\n            check your mail:\r\n            <b>{emailForMail}</b>. <br />\r\n            follow the link for password recovery\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <form onSubmit={handleSubmit}>\r\n            <Input\r\n              title={EMAIL}\r\n              placeholder=\"Email\"\r\n              onChangeText={setEmail}\r\n              value={email}\r\n              type=\"email\"\r\n            />\r\n            {emailError && (\r\n              <div>\r\n                <span className={style.errorText}>{emailError}</span>\r\n              </div>\r\n            )}\r\n            <div>\r\n              <Button condition={isFetching} type=\"submit\">\r\n                send\r\n              </Button>\r\n            </div>\r\n          </form>\r\n          <div className={style.forgotblock}>\r\n            <NavLink to={PATH.LOGIN_FORM} className={style.forgotPassword}>\r\n              I remembered the password\r\n            </NavLink>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Navigate, Route, Routes } from 'react-router-dom';\r\n\r\nimport { Login } from '../../../../a2-features/f1/Login';\r\nimport { CardsPack } from '../CardsPack';\r\nimport { CardsTable } from '../CardsTable';\r\nimport { Error404 } from '../common/Error404';\r\nimport { LoginForm } from '../common/LoginForm';\r\nimport { PacksCardsTable } from '../PackCardsTable';\r\nimport { Profile } from '../Profile';\r\nimport { TestComponent } from '../TestComponent';\r\n\r\nimport { Register } from 'a2-features/f2/Register';\r\nimport { NewPassword } from 'a2-features/f3/NewPassword';\r\nimport { RecoveryPassword } from 'a2-features/f3/RecoveryPassword';\r\nimport { PATH } from 'enums/routes';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport const RoutesContainer = (): ReturnComponentType => (\r\n  <div>\r\n    <Routes>\r\n      <Route path={PATH.LOGIN_FORM} element={<LoginForm />}>\r\n        <Route index element={<Login />} />\r\n        <Route path={PATH.REGISTER} element={<Register />} />\r\n        <Route path={PATH.RECOVERY_PASSWORD} element={<RecoveryPassword />} />\r\n        <Route path={PATH.NEW_PASSWORD} element={<NewPassword />}>\r\n          <Route path=\":token\" element={<NewPassword />} />\r\n        </Route>\r\n      </Route>\r\n      <Route path={PATH.ERROR} element={<Error404 />} />\r\n      <Route path={PATH.WRONG_PAGE} element={<Navigate to={PATH.ERROR} />} />\r\n      <Route path={PATH.TEST_PAGE} element={<TestComponent />} />\r\n      <Route path={PATH.PROFILE} element={<Profile />} />\r\n      <Route path={PATH.CARDS} element={<CardsPack />}>\r\n        <Route index element={<PacksCardsTable />} />\r\n        <Route path={PATH.CARDS_TABLE} element={<CardsTable />} />\r\n      </Route>\r\n    </Routes>\r\n  </div>\r\n);\r\n","import React, { FC, useEffect } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { AppRootState } from '../../../m2-bll/store';\r\nimport { getAuthUserData } from '../../../m2-bll/thunks/auth-thunk';\r\nimport { ErrorAll } from '../common/ErrorAll';\r\nimport { Spinner } from '../common/Spinner';\r\n\r\nimport { Header } from './Header';\r\nimport { RoutesContainer } from './RoutesContainer';\r\n\r\nimport style from 'styles/App.module.css';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\nexport const App: FC = (): ReturnComponentType => {\r\n  const dispatch = useDispatch();\r\n  const isFetching = useSelector<AppRootState, boolean>(state => state.app.isFetching);\r\n  const AuthUserStatus = useSelector<AppRootState, boolean>(state => state.auth.isAuth);\r\n  useEffect(() => {\r\n    dispatch(getAuthUserData());\r\n  }, [AuthUserStatus]);\r\n\r\n  if (isFetching) {\r\n    return (\r\n      <div className={style.container}>\r\n        <Spinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={style.container}>\r\n      <ErrorAll />\r\n      <Header />\r\n      <RoutesContainer />\r\n    </div>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ACTIONS_TYPE_APP, AppActionType } from '../actions/app-actions';\r\n\r\nconst initialRecoveryState = {\r\n  error: false,\r\n  textError: '',\r\n  isFetching: false,\r\n  email: '',\r\n  status: false,\r\n};\r\n\r\ntype InitialRecoveryStateType = typeof initialRecoveryState;\r\n\r\nexport const appReducer = (\r\n  state: InitialRecoveryStateType = initialRecoveryState,\r\n  action: AppActionType,\r\n): InitialRecoveryStateType => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE_APP.SET_ERROR_MESSAGE:\r\n      return { ...state, error: action.error, textError: action.textError };\r\n    case ACTIONS_TYPE_APP.SET_IS_FETHING:\r\n      return { ...state, isFetching: action.isFetching };\r\n    case ACTIONS_TYPE_APP.SET_EMAIL:\r\n      return { ...state, email: action.email };\r\n    case ACTIONS_TYPE_APP.SET_STATUS:\r\n      return { ...state, status: action.status };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { MeResponseStateType } from '../../m3-dal/types/loginType';\r\n\r\nimport { AUTH_ACTIONS_TYPE, AuthActionsType } from 'a1-main/m2-bll/actions/auth-actions';\r\n\r\nconst initialAuthState = {\r\n  _id: null,\r\n  email: null,\r\n  name: null,\r\n  avatar: null,\r\n  publicCardPacksCount: null,\r\n  created: null,\r\n  updated: null,\r\n  isAdmin: null,\r\n  verified: null,\r\n  rememberMe: null,\r\n  error: null,\r\n  isAuth: false,\r\n};\r\n// type AuthStateType = typeof initialAuthState;\r\ntype AuthStateType = MeResponseStateType & {\r\n  isAuth: boolean;\r\n};\r\nexport const authReducer = (\r\n  state: AuthStateType = initialAuthState,\r\n  action: AuthActionsType,\r\n): AuthStateType => {\r\n  switch (action.type) {\r\n    case AUTH_ACTIONS_TYPE.SET_USER_DATA: {\r\n      return {\r\n        ...state,\r\n        ...action.authUserData,\r\n        isAuth: action.isAuth,\r\n      };\r\n    }\r\n    case AUTH_ACTIONS_TYPE.DELETE_USER_DATA: {\r\n      return initialAuthState;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { cardsType } from '../../m3-dal/types/cardsType';\r\nimport { CARDS_ACTIONS_TYPE, CardsActionsType } from '../actions/cards-actions';\r\n\r\nconst initialCardsState = {\r\n  cards: [] as cardsType[],\r\n  cardsTotalCount: 0,\r\n  maxGrade: 10,\r\n  minGrade: 0,\r\n  page: 1,\r\n  pageCount: 4,\r\n  packUserId: '',\r\n  sortCards: '0updated',\r\n};\r\ntype initialCardsStateType = typeof initialCardsState;\r\nexport const cardsReducer = (\r\n  state: initialCardsStateType = initialCardsState,\r\n  action: CardsActionsType,\r\n): initialCardsStateType => {\r\n  switch (action.type) {\r\n    case CARDS_ACTIONS_TYPE.SET_CARDS_DATA:\r\n      return {\r\n        ...state,\r\n        cards: action.cardsData.cards,\r\n        packUserId: action.cardsData.packUserId,\r\n        cardsTotalCount: action.cardsData.cardsTotalCount,\r\n      };\r\n    case CARDS_ACTIONS_TYPE.SET_CURRENT_CARD_PAGE:\r\n      return { ...state, page: action.page };\r\n    case CARDS_ACTIONS_TYPE.SORT_CARD_DATA:\r\n      return { ...state, sortCards: action.sortData };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ACTIONS_TYPE_PASSWORD, PasswordActionType } from '../actions/password-actions';\n\nconst initialPasswordState = {\n  sendMessageSuccess: false,\n  passwordRename: false,\n};\ntype InitialPasswordStateType = typeof initialPasswordState;\n\nexport const passwordReducer = (\n  state: InitialPasswordStateType = initialPasswordState,\n  action: PasswordActionType,\n): InitialPasswordStateType => {\n  switch (action.type) {\n    case ACTIONS_TYPE_PASSWORD.SEND_MESSAGE_ON_MAIL:\n      return {\n        ...state,\n        sendMessageSuccess: action.sendMessageSuccess,\n      };\n    case ACTIONS_TYPE_PASSWORD.RENAME_PASSWORD:\n      return {\n        ...state,\n        passwordRename: action.passwordRename,\n      };\n    default:\n      return state;\n  }\n};\n","import { ACTIONS_TYPE, RegisterActionType } from '../actions/register-actions';\n\nconst initialRegisterState = {\n  signUpStatus: false,\n};\n\ntype InitialRegisterStateType = typeof initialRegisterState;\n\nexport const registerReducer = (\n  state: InitialRegisterStateType = initialRegisterState,\n  action: RegisterActionType,\n): InitialRegisterStateType => {\n  switch (action.type) {\n    case ACTIONS_TYPE.SET_REGISTER_STATUS:\n      return { ...state, signUpStatus: action.registerStatus };\n    default:\n      return state;\n  }\n};\n","import { applyMiddleware, combineReducers, createStore, compose } from 'redux';\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\n\r\nimport { AppActionType } from './actions/app-actions';\r\nimport { AuthActionsType } from './actions/auth-actions';\r\nimport { CardsActionsType } from './actions/cards-actions';\r\nimport { PasswordActionType } from './actions/password-actions';\r\nimport { RegisterActionType } from './actions/register-actions';\r\nimport { appReducer } from './reducers/app-reducer';\r\nimport { authReducer } from './reducers/auth-reducer';\r\nimport { cardsReducer } from './reducers/cards-reducer';\r\nimport { CardsPackActionType, cardsPackReducer } from './reducers/cardspack-reducer';\r\nimport { passwordReducer } from './reducers/password-reducer';\r\nimport { profileReducer } from './reducers/profile-reducer';\r\nimport { registerReducer } from './reducers/register-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  profile: profileReducer,\r\n  password: passwordReducer,\r\n  register: registerReducer,\r\n  auth: authReducer,\r\n  app: appReducer,\r\n  cardspack: cardsPackReducer,\r\n  cards: cardsReducer,\r\n});\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\nexport type AppRootState = ReturnType<typeof rootReducer>;\r\nexport type AppActionsType =\r\n  | AuthActionsType\r\n  | RegisterActionType\r\n  | PasswordActionType\r\n  | AppActionType\r\n  | CardsPackActionType\r\n  | CardsActionsType;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  AppRootState,\r\n  unknown,\r\n  AppActionsType\r\n>;\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport 'styles/index.css';\n\nimport { App } from './a1-main/m1-ui/components/main/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { store } from 'a1-main/m2-bll/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["styles/App.module.css","styles/Header.module.css","styles/ErrorPage.module.css","styles/Input.module.css","styles/Button.module.css","a1-main/m2-bll/actions/app-actions.ts","a1-main/m2-bll/actions/auth-actions.ts","a1-main/m2-bll/actions/password-actions.ts","enums/routes.ts","a1-main/m2-bll/reducers/auth-reducer.ts","a1-main/m3-dal/instance.ts","a1-main/m3-dal/auth-api.ts","a1-main/m2-bll/thunks/auth-thunk.ts","a1-main/m1-ui/components/common/ErrorAll.tsx","assets/images/preloader.svg","a1-main/m1-ui/components/common/Loader.tsx","a1-main/m2-bll/actions/register-actions.ts","a1-main/m1-ui/components/main/Header.tsx","a1-main/m1-ui/components/common/Error404.tsx","a1-main/m1-ui/components/common/CustomButton/Button.tsx","a1-main/m1-ui/components/Profile.tsx","a1-main/m1-ui/components/common/CustomCheckBox/CheckBox.tsx","a1-main/m1-ui/components/common/CustomInput/Input.tsx","constants/common.ts","a1-main/m1-ui/components/TestComponent.tsx","a2-features/f1/Login.tsx","a1-main/m2-bll/reducers/profile-reducer.ts","a1-main/m3-dal/register-api.ts","a2-features/f2/Register.tsx","a1-main/m2-bll/thunks/register-thunk.ts","a1-main/m3-dal/password-api.ts","a2-features/f3/NewPassword.tsx","a1-main/m2-bll/thunks/password-thunk.ts","a2-features/f3/RecoveryPassword.tsx","a1-main/m1-ui/components/main/RoutesContainer.tsx","a1-main/m1-ui/components/main/Main.tsx","a1-main/m1-ui/components/main/App.tsx","reportWebVitals.ts","a1-main/m2-bll/reducers/app-reducer.ts","a1-main/m2-bll/reducers/password-reducer.ts","a1-main/m2-bll/reducers/register-reducer.ts","a1-main/m2-bll/store.ts","index.tsx","styles/Login.module.css"],"names":["module","exports","ACTIONS_TYPE_APP","AUTH_ACTIONS_TYPE","setErrorMessageAC","error","textError","type","SET_ERROR_MESSAGE","setIsFethingAC","isFetching","SET_IS_FETHING","ACTIONS_TYPE_PASSWORD","setAuthUserData","authUserData","SET_USER_DATA","data","toggleIsFetching","TOGGLE_IS_FETCHING","PATH","successRenamePasswordAC","passwordRename","RENAME_PASSWORD","nullAuthData","isAuth","_id","email","name","avatar","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","initialAuthState","instance","axios","create","baseURL","process","withCredentials","authAPI","credentials","post","delete","getAuthUserData","dispatch","a","response","isAxiosError","console","log","ErrorAll","useSelector","state","app","className","s","errorAll","Loader","loader","preloader","src","alt","ACTIONS_TYPE","Header","style","header","headerContainer","title","itemMenu","to","PROFILE","isActive","active","CARDS","Error404","errorPage","errorTitle","errorImg","errorSign","errorButton","Button","children","condition","onClick","finalClassName","red","default","disabled","Profile","useDispatch","useEffect","AuthUserStatus","auth","errorMessage","message","LOGIN","Checkbox","memo","onChangeChecked","finalInputClassName","checkbox","onChange","e","currentTarget","checked","spanClassName","Input","onChangeText","value","finalSpanClassName","errorInput","superInput","trim","placeholder","TITLE_EMAIL","PASSWORD","CONFIRM_PASSWORD","EMPTY_STRING","emailValidator","TestComponent","Login","errorEmailRequired","errorPasswordRequired","useState","setEmail","emailError","setEmailError","password","setPassword","passwordError","setPasswordError","setRememberMe","loginCredentials","onSubmit","length","match","currentEmailValue","errorText","currentPasswordValue","forgotblock","RECOVERY_PASSWORD","forgotPassword","SignUpBlock","REGISTER","SignUp","registerAPI","Register","errorPasswordValidationMinLength","passwordConfirmError","setPasswordConfirmError","passwordConfirm","setPasswordConfirm","signUpStatus","register","registerStatus","SET_REGISTER_STATUS","toSignUp","passwordAPI","letterToThePost","newPassword","NewPassword","token","useParams","resetPasswordToken","renamePassword","passwordValue","handlePasswordValueChange","passwordConfirmValue","handlePasswordConfirmValueChange","RecoveryPassword","sendMessageSuccess","messageSuccess","setMessageSuccess","from","SEND_MESSAGE_ON_MAIL","sendMessageOnEmail","RoutesContainer","path","element","NEW_PASSWORD","ERROR","WRONG_PAGE","TEST_PAGE","Main","loginBlock","titleBlock","App","container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialRecoveryState","initialPasswordState","initialProfileState","initialRegisterState","rootReducer","combineReducers","profile","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23fe8042.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__Or8hn\",\"loginBlock\":\"App_loginBlock__1bzpI\",\"titleBlock\":\"App_titleBlock__3icRq\",\"preloader\":\"App_preloader__3EBfu\",\"errorAll\":\"App_errorAll__wGwqn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__gFoY0\",\"headerContainer\":\"Header_headerContainer__3UzBS\",\"itemMenu\":\"Header_itemMenu__lbFt9\",\"active\":\"Header_active__3piyb\",\"title\":\"Header_title__oYS7v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorPage\":\"ErrorPage_errorPage__3akoS\",\"errorTitle\":\"ErrorPage_errorTitle__30gez\",\"errorImg\":\"ErrorPage_errorImg__1pwfX\",\"errorSign\":\"ErrorPage_errorSign__2yIO5\",\"errorButton\":\"ErrorPage_errorButton__deR-L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"Input_superInput__1RJbc\",\"errorInput\":\"Input_errorInput__22sjQ\",\"error\":\"Input_error__3b4Pw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__2RrpN\",\"red\":\"Button_red__ppNHx\",\"changeButton\":\"Button_changeButton__2D8ht\"};","export enum ACTIONS_TYPE_APP {\n  SET_ERROR_MESSAGE = 'recovery-reducer/GET_NEW_PASS_DATA',\n  SET_IS_FETHING = 'recovery-reducer/SET_ISFETHING',\n}\ntype SetAppStatusActionType =\n  | ReturnType<typeof setErrorMessageAC>\n  | ReturnType<typeof setIsFethingAC>;\n\nexport type AppActionType = SetAppStatusActionType;\n\nexport const setErrorMessageAC = (error: boolean, textError: string) =>\n  ({\n    type: ACTIONS_TYPE_APP.SET_ERROR_MESSAGE,\n    error,\n    textError,\n  } as const);\n\nexport const setIsFethingAC = (isFetching: boolean) =>\n  ({\n    type: ACTIONS_TYPE_APP.SET_IS_FETHING,\n    isFetching,\n  } as const);\n","import { Nullable } from '../../../types/Nullable';\n\nexport enum AUTH_ACTIONS_TYPE {\n  SET_USER_DATA = 'PlaingCards/auth/SET-USER-DATA',\n  SET_USER_PHOTO = 'PlaingCards/auth/SET-USER-PHOTO',\n  TOGGLE_IS_FETCHING = 'PlaingCards/auth/TOGGLE-IS-FETCHING',\n}\n\ntype SetUserDataActionType = ReturnType<typeof setAuthUserData>;\ntype ToggleIsFetchingActionType = ReturnType<typeof toggleIsFetching>;\n\nexport type AuthActionsType = SetUserDataActionType | ToggleIsFetchingActionType;\n\nexport const setAuthUserData = (authUserData: {\n  _id: Nullable<string>;\n  email: Nullable<string>;\n  name: Nullable<string>;\n  avatar?: Nullable<string>;\n  publicCardPacksCount: Nullable<number>;\n  created: Nullable<Date>;\n  updated: Nullable<Date>;\n  isAdmin: Nullable<boolean>;\n  verified: Nullable<boolean>;\n  rememberMe: Nullable<boolean>;\n  error?: Nullable<string>;\n  isAuth: boolean;\n}) =>\n  ({\n    type: AUTH_ACTIONS_TYPE.SET_USER_DATA,\n    data: { ...authUserData },\n  } as const);\n\nexport const toggleIsFetching = (isFetching: boolean) =>\n  ({ type: AUTH_ACTIONS_TYPE.TOGGLE_IS_FETCHING, isFetching } as const);\n","export enum ACTIONS_TYPE_PASSWORD {\n  SEND_MESSAGE_ON_MAIL = 'password-reducer/SEND_MESSAGE_ON_MAIL',\n  RENAME_PASSWORD = 'password-reducer/RENAME_PASSWORD',\n}\n\nexport const successSendMessgeAC = (sendMessageSuccess: boolean) =>\n  ({\n    type: ACTIONS_TYPE_PASSWORD.SEND_MESSAGE_ON_MAIL,\n    sendMessageSuccess,\n  } as const);\n\nexport const successRenamePasswordAC = (passwordRename: boolean) =>\n  ({\n    type: ACTIONS_TYPE_PASSWORD.RENAME_PASSWORD,\n    passwordRename,\n  } as const);\n\nexport type PasswordActionType =\n  | ReturnType<typeof successSendMessgeAC>\n  | ReturnType<typeof successRenamePasswordAC>;\n","export enum PATH {\n  PROFILE = '/',\n  REGISTER = '/register',\n  LOGIN = '/login',\n  NEW_PASSWORD = '/new_pass',\n  RECOVERY_PASSWORD = '/recovery',\n  ERROR = '/404',\n  WRONG_PAGE = '/*',\n  TEST_PAGE = '/test',\n  CARDS = '/cards',\n}\n","import { Nullable } from '../../../types/Nullable';\n\nimport { AUTH_ACTIONS_TYPE, AuthActionsType } from 'a1-main/m2-bll/actions/auth-actions';\n\nexport const nullAuthData = {\n  isAuth: false,\n  _id: null,\n  email: null,\n  name: null,\n  avatar: null,\n  publicCardPacksCount: null,\n  created: null,\n  updated: null,\n  isAdmin: null,\n  verified: null,\n  rememberMe: null,\n  error: null,\n};\n\nconst initialAuthState = {\n  _id: null as Nullable<string>,\n  email: null as Nullable<string>,\n  name: null as Nullable<string>,\n  avatar: null as Nullable<string>,\n  publicCardPacksCount: null as Nullable<number>,\n  created: null as Nullable<Date>,\n  updated: null as Nullable<Date>,\n  isAdmin: null as Nullable<boolean>,\n  verified: null as Nullable<boolean>,\n  rememberMe: null as Nullable<boolean>,\n  error: null as Nullable<string>,\n  isAuth: false,\n};\ntype AuthStateType = typeof initialAuthState;\n\nexport const authReducer = (\n  state: AuthStateType = initialAuthState,\n  action: AuthActionsType,\n): AuthStateType => {\n  switch (action.type) {\n    case AUTH_ACTIONS_TYPE.SET_USER_DATA: {\n      return {\n        ...state,\n        ...action.data,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import axios from 'axios';\n\nexport const instance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  withCredentials: true,\n});\n","import { AxiosResponse } from 'axios';\n\nimport { instance } from 'a1-main/m3-dal/instance';\nimport {\n  DeleteMeResponseStateType,\n  LoginCredentialsSendType,\n  LoginResponseStateType,\n  MeResponseStateType,\n} from 'a1-main/m3-dal/types/loginType';\n\nexport const authAPI = {\n  login(credentials: LoginCredentialsSendType) {\n    return instance.post<LoginCredentialsSendType, AxiosResponse<LoginResponseStateType>>(\n      `auth/login`,\n      credentials,\n    );\n  },\n\n  me() {\n    return instance.post<{}, AxiosResponse<MeResponseStateType>>(`auth/me`, {});\n  },\n\n  deleteMe() {\n    return instance.delete<{}, AxiosResponse<DeleteMeResponseStateType>>(`auth/me`, {});\n  },\n};\n","import axios from 'axios';\n\nimport { setErrorMessageAC, setIsFethingAC } from '../actions/app-actions';\nimport { setAuthUserData } from '../actions/auth-actions';\nimport { successRenamePasswordAC } from '../actions/password-actions';\nimport { nullAuthData } from '../reducers/auth-reducer';\n\nimport { AppThunk } from 'a1-main/m2-bll/store';\nimport { authAPI } from 'a1-main/m3-dal/auth-api';\nimport { LoginCredentialsSendType } from 'a1-main/m3-dal/types/loginType';\n\nexport const getAuthUserData = (): AppThunk => async dispatch => {\n  dispatch(setIsFethingAC(true));\n  try {\n    const response = await authAPI.me();\n    dispatch(setAuthUserData({ isAuth: true, ...response.data }));\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      console.log(error);\n    }\n    if (error) {\n      console.log(error);\n    }\n  } finally {\n    dispatch(setIsFethingAC(false));\n  }\n};\n\nexport const toAuth =\n  (credentials: LoginCredentialsSendType): AppThunk =>\n  async dispatch => {\n    dispatch(setIsFethingAC(true));\n    try {\n      const response = await authAPI.login(credentials);\n      dispatch(setAuthUserData({ ...response.data }));\n      dispatch(successRenamePasswordAC(false));\n      dispatch(setErrorMessageAC(false, ''));\n      dispatch(getAuthUserData());\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        const errorMessage = error.response.data.error;\n        dispatch(setErrorMessageAC(true, `login error: ${errorMessage}`));\n      } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\n        dispatch(setErrorMessageAC(true, `Нет соединения`));\n      }\n    } finally {\n      dispatch(setIsFethingAC(false));\n    }\n  };\n\nexport const deleteAuthUserData = (): AppThunk => async dispatch => {\n  dispatch(setIsFethingAC(true));\n  try {\n    await authAPI.deleteMe();\n    dispatch(setAuthUserData({ ...nullAuthData }));\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      console.log(error);\n      const errorMessage = error.response;\n      dispatch(setErrorMessageAC(true, `не удалена: ${errorMessage}`));\n    } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\n      dispatch(setErrorMessageAC(true, `Нет соединения`));\n    }\n  } finally {\n    dispatch(setIsFethingAC(false));\n  }\n};\n","import { useSelector } from 'react-redux';\n\nimport { ReturnComponentType } from '../../../../types/ReturnComponentType';\nimport { AppRootState } from '../../../m2-bll/store';\n\nimport s from 'styles/App.module.css';\n\nexport const ErrorAll = (): ReturnComponentType => {\n  const error = useSelector<AppRootState, boolean>(state => state.app.error);\n  const textError = useSelector<AppRootState, string>(state => state.app.textError);\n  return (\n    <div>\n      {error && (\n        <div className={s.errorAll}>\n          <h1>Произошла ошибка</h1>\n          <h2>{textError}</h2>\n        </div>\n      )}\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/preloader.eb47674d.svg\";","import { useSelector } from 'react-redux';\n\nimport { ReturnComponentType } from '../../../../types/ReturnComponentType';\nimport { AppRootState } from '../../../m2-bll/store';\n\nimport preloader from 'assets/images/preloader.svg';\nimport s from 'styles/App.module.css';\n\nexport const Loader = (): ReturnComponentType => {\n  const loader = useSelector<AppRootState, boolean>(state => state.app.isFetching);\n  return (\n    <div>\n      {loader && (\n        <div className={s.preloader}>\n          <img src={preloader} alt=\"\" />\n        </div>\n      )}\n    </div>\n  );\n};\n","export enum ACTIONS_TYPE {\n  SET_REGISTER_STATUS = 'register-reducer/SET_REGISTER_STATUS',\n}\n\ntype SetRegisterStatusActionType = ReturnType<typeof setRegisterStatus>;\n\nexport type RegisterActionType = SetRegisterStatusActionType;\n\nexport const setRegisterStatus = (registerStatus: boolean) =>\n  ({\n    type: ACTIONS_TYPE.SET_REGISTER_STATUS,\n    registerStatus,\n  } as const);\n","import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\n\nimport { PATH } from 'enums/routes';\nimport style from 'styles/Header.module.css';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const Header = (): ReturnComponentType => (\n  // const setClassName = (isActive:boolean) => isActive ? style.active :''\n  <div className={style.header}>\n    <div className={style.headerContainer}>\n      <h1 className={style.title}>Plaing Cards</h1>\n      <div className={style.itemMenu}>\n        <NavLink\n          to={PATH.PROFILE}\n          className={({ isActive }) => (isActive ? style.active : '')}\n        >\n          Profile\n        </NavLink>\n      </div>\n\n      {/* <div className={style.itemMenu}> */}\n      {/*  <NavLink */}\n      {/*    to={PATH.LOGIN} */}\n      {/*    className={({ isActive }) => (isActive ? style.active : '')} */}\n      {/*  > */}\n      {/*    Login */}\n      {/*  </NavLink> */}\n      {/* </div> */}\n      <div className={style.itemMenu}>\n        <NavLink\n          to={PATH.CARDS}\n          className={({ isActive }) => (isActive ? style.active : '')}\n        >\n          Packs List\n        </NavLink>\n      </div>\n    </div>\n  </div>\n);\n","import { NavLink } from 'react-router-dom';\n\nimport { PATH } from 'enums/routes';\nimport style from 'styles/ErrorPage.module.css';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const Error404 = (): ReturnComponentType => (\n  <div className={style.errorPage}>\n    <div className={style.errorTitle}>\n      <h1>\n        4<span className={style.errorImg} />4\n      </h1>\n    </div>\n    <div className={style.errorSign}>OOPS! PAGE NOT BE FOUND</div>\n    <div>\n      <p>\n        Sorry but the page you are looking for does not exist, have been removed, name\n        changed or is temporarily unavailable\n      </p>\n    </div>\n    <div>\n      <NavLink to={PATH.PROFILE} className={style.errorButton}>\n        Back to homepage\n      </NavLink>\n    </div>\n  </div>\n);\n","import { FC } from 'react';\n\nimport { ButtonType } from './types/buttonType';\n\nimport style from 'styles/Button.module.css';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const Button: FC<ButtonType> = ({\n  children,\n  className,\n  condition,\n  onClick,\n}): ReturnComponentType => {\n  const finalClassName = `${condition ? style.red : style.default} ${className}`;\n  return (\n    <button\n      type=\"submit\"\n      className={finalClassName}\n      onClick={onClick}\n      disabled={condition}\n    >\n      {children}\n    </button>\n  );\n};\n","import React, { useEffect } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { toggleIsFetching } from '../../m2-bll/actions/auth-actions';\nimport { deleteAuthUserData } from '../../m2-bll/thunks/auth-thunk';\n\nimport { Button } from './common/CustomButton/Button';\nimport { Loader } from './common/Loader';\n\nimport { AppRootState } from 'a1-main/m2-bll/store';\nimport { PATH } from 'enums/routes';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const Profile = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(toggleIsFetching(false));\n  }, []);\n\n  const AuthUserStatus = useSelector<AppRootState, boolean>(state => state.auth.isAuth);\n  const isFetching = useSelector<AppRootState, boolean>(state => state.app.isFetching);\n\n  const logOut = (): void => {\n    dispatch(toggleIsFetching(true));\n    dispatch(deleteAuthUserData());\n  };\n\n  if (!AuthUserStatus) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n\n  return (\n    <div>\n      <div>Profile</div>\n      <div>\n        <Button onClick={logOut} condition={isFetching}>\n          Log out\n        </Button>\n      </div>\n      {isFetching && Loader}\n    </div>\n  );\n};\n","import { ChangeEvent, FC, memo } from 'react';\n\nimport { CheckboxType } from './types/checkBoxType';\n\nimport style from 'styles/CheckBox.module.css';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const Checkbox: FC<CheckboxType> = memo(\n  ({ onChangeChecked, className, children }): ReturnComponentType => {\n    const handleCheckboxValueChange = (e: ChangeEvent<HTMLInputElement>): void => {\n      if (onChangeChecked) {\n        onChangeChecked(e.currentTarget.checked);\n      }\n    };\n\n    const finalInputClassName = `${style.checkbox} ${className || ''}`;\n\n    return (\n      // eslint-disable-next-line jsx-a11y/label-has-associated-control\n      <label>\n        <input\n          type=\"checkbox\"\n          onChange={handleCheckboxValueChange}\n          className={finalInputClassName}\n        />\n        {children && <span className={style.spanClassName}>{children}</span>}\n      </label>\n    );\n  },\n);\n","import { ChangeEvent, FC } from 'react';\n\nimport { CustomInputType } from './types/CustomInputType';\n\nimport style from 'styles/Input.module.css';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const Input: FC<CustomInputType> = ({\n  // title,\n  onChangeText,\n  error,\n  className,\n  spanClassName,\n  value,\n  type,\n}): ReturnComponentType => {\n  const handleInputValueChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    if (onChangeText) {\n      onChangeText(e.currentTarget.value.trim());\n    }\n  };\n\n  const finalSpanClassName = `${style.error} ${spanClassName || ''}`;\n  const finalInputClassName = `${\n    error ? style.errorInput : style.superInput\n  } ${className}`;\n\n  return (\n    <div>\n      {/* <h1>{title}</h1> */}\n      <input\n        type={type}\n        onChange={handleInputValueChange}\n        className={finalInputClassName}\n        value={value}\n        placeholder={type}\n      />\n      {error && <span className={finalSpanClassName}>{error}</span>}\n    </div>\n  );\n};\n","export const TITLE_EMAIL = 'Email';\nexport const PASSWORD = 'Password';\nexport const CONFIRM_PASSWORD = 'Confirm Password';\nexport const EMPTY_STRING = '';\nexport const ZERO_LENGTH = 0;\nexport const RESPONSE_STATUS_OK = 200;\nexport const emailValidator = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n","import React from 'react';\n\nimport { Button } from './common/CustomButton/Button';\nimport { Checkbox } from './common/CustomCheckBox/CheckBox';\nimport { Input } from './common/CustomInput/Input';\n\nimport { PASSWORD, TITLE_EMAIL } from 'constants/common';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const TestComponent = (): ReturnComponentType => (\n  <div>\n    <Input\n      title={TITLE_EMAIL}\n      // onChangeText={setText}\n      // onEnter={showAlert}\n      // error={error}\n      // spanClassName={s.testSpanError}\n      //  value={value}\n    />\n    <Input title={PASSWORD} />\n    <div>\n      <Checkbox>Remember me</Checkbox>\n    </div>\n    <div>\n      <Button>Нажми</Button>\n    </div>\n  </div>\n);\n","import React, { useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate, NavLink } from 'react-router-dom';\n\nimport { Button } from 'a1-main/m1-ui/components/common/CustomButton/Button';\nimport { Checkbox } from 'a1-main/m1-ui/components/common/CustomCheckBox/CheckBox';\nimport { Input } from 'a1-main/m1-ui/components/common/CustomInput/Input';\nimport { AppRootState } from 'a1-main/m2-bll/store';\nimport { toAuth } from 'a1-main/m2-bll/thunks/auth-thunk';\nimport { LoginCredentialsSendType } from 'a1-main/m3-dal/types/loginType';\nimport {\n  emailValidator,\n  EMPTY_STRING,\n  PASSWORD,\n  TITLE_EMAIL,\n  ZERO_LENGTH,\n} from 'constants/common';\nimport { PATH } from 'enums/routes';\nimport style from 'styles/Login.module.css';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const Login = (): ReturnComponentType => {\n  const passwordMinLength = 7;\n  const errorEmailValidation = 'Email is incorrect';\n  const errorEmailRequired = 'Email is required';\n  const errorPasswordRequired = 'Password is required';\n  const errorPasswordValidationMinLength = 'Password must be at least 7 characters';\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState<string>(EMPTY_STRING);\n  const [emailError, setEmailError] = useState<string>(EMPTY_STRING);\n  const [password, setPassword] = useState<string>(EMPTY_STRING);\n  const [passwordError, setPasswordError] = useState<string>(EMPTY_STRING);\n  const [rememberMe, setRememberMe] = useState<boolean>(false);\n  const loginCredentials: LoginCredentialsSendType = { email, password, rememberMe };\n  const AuthUserStatus = useSelector<AppRootState, boolean>(state => state.auth.isAuth);\n  const isFetching = useSelector<AppRootState, boolean>(state => state.app.isFetching);\n  const handleEmailValueChange = (emailValue: string): void => {\n    setEmail(emailValue);\n    if (emailError) {\n      setEmailError(EMPTY_STRING);\n    }\n  };\n  const handlePasswordValueChange = (passwordValue: string): void => {\n    setPassword(passwordValue);\n    if (passwordError) {\n      setPasswordError(EMPTY_STRING);\n    }\n  };\n\n  const handleSubmit = (): void => {\n    if (email.length === ZERO_LENGTH && password.length === ZERO_LENGTH) {\n      setEmailError(errorEmailRequired);\n      setPasswordError(errorPasswordRequired);\n      return;\n    }\n\n    if (email.length === ZERO_LENGTH) {\n      setEmailError(errorEmailRequired);\n    }\n    if (password.length === ZERO_LENGTH) {\n      setPasswordError(errorPasswordRequired);\n    }\n    if (email.match(emailValidator) === null && email.length > ZERO_LENGTH) {\n      setEmailError(errorEmailValidation);\n    }\n    if (password.length < passwordMinLength && password.length > ZERO_LENGTH) {\n      setPasswordError(errorPasswordValidationMinLength);\n    }\n    if (email.match(emailValidator) && password.length >= passwordMinLength) {\n      setEmailError(EMPTY_STRING);\n      setPasswordError(EMPTY_STRING);\n      dispatch(toAuth(loginCredentials));\n    }\n  };\n  if (AuthUserStatus) {\n    return <Navigate to={PATH.PROFILE} />;\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <Input\n          title={TITLE_EMAIL}\n          onChangeText={(currentEmailValue: string) =>\n            handleEmailValueChange(currentEmailValue)\n          }\n          value={email}\n          type=\"email\"\n        />\n        {emailError && (\n          <div>\n            <span className={style.errorText}>{emailError}</span>\n          </div>\n        )}\n        <Input\n          title={PASSWORD}\n          onChangeText={(currentPasswordValue: string) =>\n            handlePasswordValueChange(currentPasswordValue)\n          }\n          value={password}\n          type=\"password\"\n        />\n        {passwordError && (\n          <div>\n            <span className={style.errorText}>{passwordError}</span>\n          </div>\n        )}\n        <Checkbox onChangeChecked={setRememberMe} checked={rememberMe} type=\"checkbox\">\n          Remember me\n        </Checkbox>\n        <div className={style.forgotblock}>\n          <NavLink to={PATH.RECOVERY_PASSWORD} className={style.forgotPassword}>\n            I forgot password\n          </NavLink>\n        </div>\n        <div>\n          <Button condition={isFetching}>Log in</Button>\n        </div>\n      </form>\n      <div className={style.SignUpBlock}>\n        <p>Don`t have an account?</p>\n        <NavLink to={PATH.REGISTER} className={style.SignUp}>\n          SignUp\n        </NavLink>\n      </div>\n    </div>\n  );\n};\n","export type initialProfileStateType = any;\n\nconst initialProfileState: initialProfileStateType = {};\n\nexport const profileReducer = (\n  state: initialProfileStateType = initialProfileState,\n  action: any,\n): initialProfileStateType => {\n  switch (action.type) {\n    // case ACTIONS_TYPE.GET_PROFILE_DATA:\n    default:\n      return state;\n  }\n};\n\n// образец типов экшена\n\nexport enum ACTIONS_TYPE {\n  GET_PROFILE_DATA = 'profile-reducer/GET_PROFILE_DATA',\n}\n","import { AxiosResponse } from 'axios';\n\nimport { instance } from './instance';\nimport { credentialsType } from './types/registerType';\n\nexport const registerAPI = {\n  signUp(credentials: credentialsType) {\n    return instance.post<credentialsType, AxiosResponse<any>>(\n      `auth/register`,\n      credentials,\n    );\n  },\n};\n","import React, { useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport style from '../../styles/Login.module.css';\n\nimport { Button } from 'a1-main/m1-ui/components/common/CustomButton/Button';\nimport { Input } from 'a1-main/m1-ui/components/common/CustomInput/Input';\nimport { AppRootState } from 'a1-main/m2-bll/store';\nimport { toSignUp } from 'a1-main/m2-bll/thunks/register-thunk';\nimport { credentialsType } from 'a1-main/m3-dal/types/registerType';\nimport {\n  CONFIRM_PASSWORD,\n  emailValidator,\n  EMPTY_STRING,\n  PASSWORD,\n  TITLE_EMAIL,\n  ZERO_LENGTH,\n} from 'constants/common';\nimport { PATH } from 'enums/routes';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const Register = (): ReturnComponentType => {\n  const passwordMinLength = 7;\n  const errorEmailValidation = 'Email is incorrect';\n  const errorEmailRequired = 'Email is required';\n  const errorPasswordRequired = 'Password is required';\n  const errorPasswordValidationMinLength = 'Password must be at least 7 characters';\n  const errorPasswordConfirmValidation = 'Passwords mismatch';\n  const [passwordError, setPasswordError] = useState<string>(EMPTY_STRING);\n  const [passwordConfirmError, setPasswordConfirmError] = useState<string>(EMPTY_STRING);\n  const [email, setEmail] = useState<string>(EMPTY_STRING);\n  const [emailError, setEmailError] = useState<string>(EMPTY_STRING);\n  const [password, setPassword] = useState<string>(EMPTY_STRING);\n  const [passwordConfirm, setPasswordConfirm] = useState<string>(EMPTY_STRING);\n  const signUpStatus = useSelector<AppRootState, boolean>(\n    state => state.register.signUpStatus,\n  );\n  const isFetching = useSelector<AppRootState, boolean>(state => state.app.isFetching);\n  const dispatch = useDispatch();\n\n  const credentials: credentialsType = { email, password };\n  const handleSubmit = (): void => {\n    if (\n      email.length === ZERO_LENGTH &&\n      password.length === ZERO_LENGTH &&\n      passwordConfirm.length === ZERO_LENGTH\n    ) {\n      setEmailError(errorEmailRequired);\n      setPasswordError(errorPasswordRequired);\n      setPasswordConfirmError(errorPasswordRequired);\n      return;\n    }\n\n    if (email.length === ZERO_LENGTH) {\n      setEmailError(errorEmailRequired);\n    }\n    if (email.match(emailValidator) === null && email.length > ZERO_LENGTH) {\n      setEmailError(errorEmailValidation);\n    }\n    if (email.match(emailValidator)) {\n      setEmailError(EMPTY_STRING);\n    }\n\n    if (password.length === ZERO_LENGTH) {\n      setPasswordError(errorPasswordRequired);\n    }\n    if (password.length < passwordMinLength && password.length > ZERO_LENGTH) {\n      setPasswordError(errorPasswordValidationMinLength);\n    }\n    if (password.length >= passwordMinLength) {\n      setPasswordError(EMPTY_STRING);\n    }\n\n    if (passwordConfirm.length === ZERO_LENGTH) {\n      setPasswordConfirmError(errorPasswordRequired);\n    }\n    if (\n      passwordConfirm.length < passwordMinLength &&\n      passwordConfirm.length > ZERO_LENGTH\n    ) {\n      setPasswordConfirmError(errorPasswordValidationMinLength);\n    }\n    if (passwordConfirm.length >= passwordMinLength) {\n      setPasswordConfirmError(EMPTY_STRING);\n    }\n\n    if (passwordConfirm.length === ZERO_LENGTH) {\n      setPasswordConfirmError(errorPasswordRequired);\n      return;\n    }\n    if (\n      passwordConfirm.length < passwordMinLength &&\n      passwordConfirm.length > ZERO_LENGTH\n    ) {\n      setPasswordConfirmError(errorPasswordValidationMinLength);\n    }\n    if (\n      password !== passwordConfirm &&\n      password.length !== ZERO_LENGTH &&\n      passwordConfirm.length !== ZERO_LENGTH\n    ) {\n      setPasswordConfirmError(errorPasswordConfirmValidation);\n      return;\n    }\n\n    if (\n      email.match(emailValidator) &&\n      password.length >= passwordMinLength &&\n      passwordConfirm.length >= passwordMinLength &&\n      password === passwordConfirm\n    ) {\n      setEmailError(EMPTY_STRING);\n      setPasswordError(EMPTY_STRING);\n      setPasswordConfirmError(EMPTY_STRING);\n      dispatch(toSignUp(credentials));\n    }\n  };\n  if (signUpStatus) return <Navigate to={PATH.LOGIN} />;\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <Input\n          title={TITLE_EMAIL}\n          onChangeText={setEmail}\n          value={email}\n          type=\"email\"\n          // onEnter={showAlert}\n          // error={error}\n          // spanClassName={s.testSpanError}\n        />\n        {emailError && (\n          <div>\n            <span className={style.errorText}>{emailError}</span>\n          </div>\n        )}\n        <Input\n          title={PASSWORD}\n          onChangeText={setPassword}\n          value={password}\n          type=\"password\"\n        />\n        {passwordError && (\n          <div>\n            <span className={style.errorText}>{passwordError}</span>\n          </div>\n        )}\n        <Input\n          title={CONFIRM_PASSWORD}\n          onChangeText={setPasswordConfirm}\n          value={passwordConfirm}\n          type=\"password\"\n        />\n        {passwordConfirmError && (\n          <div>\n            <span className={style.errorText}>{passwordConfirmError}</span>\n          </div>\n        )}\n        <div>\n          <Button condition={isFetching}>Register</Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import axios from 'axios';\n\nimport { credentialsType } from '../../m3-dal/types/registerType';\nimport { setErrorMessageAC, setIsFethingAC } from '../actions/app-actions';\nimport { setRegisterStatus } from '../actions/register-actions';\nimport { AppThunk } from '../store';\n\nimport { registerAPI } from 'a1-main/m3-dal/register-api';\n\nexport const toSignUp =\n  (credentials: credentialsType): AppThunk =>\n  async dispatch => {\n    dispatch(setIsFethingAC(true));\n    try {\n      await registerAPI.signUp(credentials);\n      dispatch(setRegisterStatus(true));\n      dispatch(setErrorMessageAC(false, ''));\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        const errorMessage = error.response.data.error;\n        dispatch(setErrorMessageAC(true, `Регистрация не прошла! ${errorMessage}`));\n      }\n      // if (error) {\n      //   dispatch(setErrorMessageAC(true, `Нет соединения`));\n      // }\n    } finally {\n      dispatch(setIsFethingAC(false));\n    }\n  };\n","import { ReamePasswordType } from '../../a2-features/f3/NewPassword';\nimport { LetterType } from '../../a2-features/f3/RecoveryPassword';\n\nimport { instance } from './instance';\n\nexport const passwordAPI = {\n  sendMessage(letterToThePost: LetterType) {\n    return instance.post<any>(`auth/forgot`, letterToThePost);\n  },\n  updatePassword(newPassword: ReamePasswordType) {\n    return instance.post<any>(`/auth/set-new-password`, newPassword);\n  },\n};\n","import React, { useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate, useParams } from 'react-router-dom';\n\nimport { Button } from '../../a1-main/m1-ui/components/common/CustomButton/Button';\nimport { Input } from '../../a1-main/m1-ui/components/common/CustomInput/Input';\nimport { AppRootState } from '../../a1-main/m2-bll/store';\nimport { renamePassword } from '../../a1-main/m2-bll/thunks/password-thunk';\nimport {\n  CONFIRM_PASSWORD,\n  EMPTY_STRING,\n  PASSWORD,\n  ZERO_LENGTH,\n} from '../../constants/common';\nimport { PATH } from '../../enums/routes';\nimport style from '../../styles/Login.module.css';\n\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport type ReamePasswordType = {\n  password: string;\n  resetPasswordToken: string;\n};\n\nexport const NewPassword = (): ReturnComponentType => {\n  const [password, setPassword] = useState<string>(EMPTY_STRING);\n  const [passwordConfirm, setPasswordConfirm] = useState<string>(EMPTY_STRING);\n  const passwordMinLength = 7;\n  const errorPasswordRequired = 'Password is required';\n  const errorPasswordValidationMinLength = 'Password must be at least 7 characters';\n  const errorPasswordConfirmValidation = 'Passwords mismatch';\n  const [passwordError, setPasswordError] = useState<string>(EMPTY_STRING);\n  const [passwordConfirmError, setPasswordConfirmError] = useState<string>(EMPTY_STRING);\n  const passwordRename = useSelector<AppRootState, boolean>(\n    state => state.password.passwordRename,\n  );\n  const isFetching = useSelector<AppRootState, boolean>(state => state.app.isFetching);\n  const dispatch = useDispatch();\n\n  const { token } = useParams<string>();\n  const newPassword: ReamePasswordType = {\n    password,\n    resetPasswordToken: token || '',\n  };\n\n  const handlePasswordValueChange = (passwordValue: string): void => {\n    setPassword(passwordValue);\n    if (passwordError) {\n      setPasswordError(EMPTY_STRING);\n    }\n  };\n\n  const handlePasswordConfirmValueChange = (passwordConfirmValue: string): void => {\n    setPasswordConfirm(passwordConfirmValue);\n    if (passwordConfirmError) {\n      setPasswordConfirmError(EMPTY_STRING);\n    }\n  };\n\n  const handleSubmit = (): void => {\n    if (password.length === ZERO_LENGTH) {\n      setPasswordError(errorPasswordRequired);\n    }\n    if (password.length < passwordMinLength && password.length > ZERO_LENGTH) {\n      setPasswordError(errorPasswordValidationMinLength);\n    }\n\n    if (passwordConfirm.length === ZERO_LENGTH) {\n      setPasswordConfirmError(errorPasswordRequired);\n    }\n    if (\n      passwordConfirm.length < passwordMinLength &&\n      passwordConfirm.length > ZERO_LENGTH\n    ) {\n      setPasswordConfirmError(errorPasswordValidationMinLength);\n    }\n\n    if (password !== passwordConfirm) {\n      setPasswordConfirmError(errorPasswordConfirmValidation);\n    }\n    if (\n      password.length >= passwordMinLength &&\n      passwordConfirm.length >= passwordMinLength &&\n      password === passwordConfirm\n    ) {\n      setPasswordError(EMPTY_STRING);\n      setPasswordConfirmError(EMPTY_STRING);\n      dispatch(renamePassword(newPassword));\n    }\n  };\n  if (passwordRename) return <Navigate to={PATH.LOGIN} />;\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <Input\n          title={PASSWORD}\n          onChangeText={(passwordValue: string) =>\n            handlePasswordValueChange(passwordValue)\n          }\n          value={password}\n          type=\"password\"\n        />\n        {passwordError && (\n          <div>\n            <span className={style.errorText}>{passwordError}</span>\n          </div>\n        )}\n        <Input\n          title={CONFIRM_PASSWORD}\n          onChangeText={(passwordConfirmValue: string) =>\n            handlePasswordConfirmValueChange(passwordConfirmValue)\n          }\n          value={passwordConfirm}\n          type=\"password\"\n        />\n        {passwordConfirmError && (\n          <div>\n            <span className={style.errorText}>{passwordConfirmError}</span>\n          </div>\n        )}\n        <div>\n          <Button condition={isFetching}>update</Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import axios from 'axios';\n\nimport { ReamePasswordType } from '../../../a2-features/f3/NewPassword';\nimport { LetterType } from '../../../a2-features/f3/RecoveryPassword';\nimport { passwordAPI } from '../../m3-dal/password-api';\nimport { setErrorMessageAC, setIsFethingAC } from '../actions/app-actions';\nimport {\n  successRenamePasswordAC,\n  successSendMessgeAC,\n} from '../actions/password-actions';\nimport { AppThunk } from '../store';\n\nexport const sendMessageOnEmail =\n  (letterToThePost: LetterType): AppThunk =>\n  async dispatch => {\n    dispatch(setIsFethingAC(true));\n    try {\n      await passwordAPI.sendMessage(letterToThePost);\n      dispatch(successSendMessgeAC(true));\n      dispatch(setErrorMessageAC(false, ''));\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        const errorMessage = error.response.data.error;\n        dispatch(\n          setErrorMessageAC(true, `Не получилось отправить письмо! ${errorMessage}`),\n        );\n      } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\n        dispatch(setErrorMessageAC(true, `Нет соединения`));\n      }\n    } finally {\n      dispatch(setIsFethingAC(false));\n    }\n  };\n\nexport const renamePassword =\n  (newPassword: ReamePasswordType): AppThunk =>\n  async dispatch => {\n    dispatch(setIsFethingAC(true));\n    try {\n      await passwordAPI.updatePassword(newPassword);\n      dispatch(successRenamePasswordAC(true));\n      dispatch(setErrorMessageAC(false, ''));\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        const errorMessage = error.response.data.error;\n        dispatch(\n          setErrorMessageAC(\n            true,\n            `Пароль не обновился пропробуйте снова! ${errorMessage}`,\n          ),\n        );\n      } else if (axios.isAxiosError(error) && error.message === 'Network Error') {\n        dispatch(setErrorMessageAC(true, `Нет соединения`));\n      }\n    } finally {\n      dispatch(setIsFethingAC(false));\n    }\n  };\n","import React, { useEffect, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Button } from '../../a1-main/m1-ui/components/common/CustomButton/Button';\nimport { Input } from '../../a1-main/m1-ui/components/common/CustomInput/Input';\nimport { AppRootState } from '../../a1-main/m2-bll/store';\nimport { sendMessageOnEmail } from '../../a1-main/m2-bll/thunks/password-thunk';\nimport {\n  emailValidator,\n  EMPTY_STRING,\n  TITLE_EMAIL,\n  ZERO_LENGTH,\n} from '../../constants/common';\nimport style from '../../styles/Login.module.css';\n\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport type LetterType = {\n  email: string;\n  from: string;\n  message: string;\n};\n\nexport const RecoveryPassword = (): ReturnComponentType => {\n  const sendMessageSuccess = useSelector<AppRootState, boolean>(\n    state => state.password.sendMessageSuccess,\n  );\n  const isFetching = useSelector<AppRootState, boolean>(state => state.app.isFetching);\n  const [email, setEmail] = useState<string>(EMPTY_STRING);\n  const [emailError, setEmailError] = useState<string>(EMPTY_STRING);\n  const [messageSuccess, setMessageSuccess] = useState<boolean>(sendMessageSuccess);\n  const errorEmailValidation = 'Email is incorrect';\n  const errorEmailRequired = 'Email is required';\n\n  useEffect(() => {\n    setMessageSuccess(sendMessageSuccess);\n  }, [sendMessageSuccess]);\n\n  const dispatch = useDispatch();\n\n  const letterToThePost: LetterType = {\n    email,\n    from: 'test-front-admin <ai73a@yandex.by>',\n    message: `<div style='background-color: #d6f8f0; padding: 20px'>\n'password recovery link': <a href='http://localhost:3000/PlaingCards/new_pass#/new_pass/$token$/'>link</a></div>`,\n  };\n\n  const handleSubmit = (): void => {\n    if (email.length === ZERO_LENGTH) {\n      setEmailError(errorEmailRequired);\n      return;\n    }\n    if (email.match(emailValidator) === null && email.length > ZERO_LENGTH) {\n      setEmailError(errorEmailValidation);\n      return;\n    }\n\n    if (email.match(emailValidator)) {\n      setEmailError(EMPTY_STRING);\n      dispatch(sendMessageOnEmail(letterToThePost));\n    }\n  };\n  return (\n    <div>\n      {messageSuccess ? (\n        <div>\n          <p>\n            Проверьте свою почту:\n            <b>{email}</b>. И перейдите по ссылке для восстановления пароля\n          </p>\n        </div>\n      ) : (\n        <form onSubmit={handleSubmit}>\n          <Input title={TITLE_EMAIL} onChangeText={setEmail} value={email} type=\"email\" />\n          {emailError && (\n            <div>\n              <span className={style.errorText}>{emailError}</span>\n            </div>\n          )}\n          <div>\n            <Button condition={isFetching}>send</Button>\n          </div>\n        </form>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Navigate, Route, Routes } from 'react-router-dom';\n\nimport { Error404 } from 'a1-main/m1-ui/components/common/Error404';\nimport { Profile } from 'a1-main/m1-ui/components/Profile';\nimport { TestComponent } from 'a1-main/m1-ui/components/TestComponent';\nimport { Login } from 'a2-features/f1/Login';\nimport { Register } from 'a2-features/f2/Register';\nimport { NewPassword } from 'a2-features/f3/NewPassword';\nimport { RecoveryPassword } from 'a2-features/f3/RecoveryPassword';\nimport { PATH } from 'enums/routes';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const RoutesContainer = (): ReturnComponentType => (\n  <div>\n    <Routes>\n      <Route path={PATH.PROFILE} element={<Profile />} />\n      <Route path={PATH.REGISTER} element={<Register />} />\n      <Route path={PATH.LOGIN} element={<Login />} />\n      <Route path={PATH.RECOVERY_PASSWORD} element={<RecoveryPassword />} />\n      <Route path={PATH.NEW_PASSWORD} element={<NewPassword />}>\n        <Route path=\":token\" element={<NewPassword />} />\n      </Route>\n      <Route path={PATH.ERROR} element={<Error404 />} />\n      <Route path={PATH.WRONG_PAGE} element={<Navigate to={PATH.ERROR} />} />\n      <Route path={PATH.TEST_PAGE} element={<TestComponent />} />\n    </Routes>\n  </div>\n);\n","import React from 'react';\n\nimport { RoutesContainer } from './RoutesContainer';\n\nimport s from 'styles/App.module.css';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const Main = (): ReturnComponentType => (\n  <div className={s.loginBlock}>\n    <h1 className={s.titleBlock}>Plaing Cards</h1>\n    <RoutesContainer />\n  </div>\n);\n","import React, { FC, useEffect } from 'react';\n\nimport { useDispatch } from 'react-redux';\n\nimport { getAuthUserData } from '../../../m2-bll/thunks/auth-thunk';\nimport { ErrorAll } from '../common/ErrorAll';\nimport { Loader } from '../common/Loader';\n\nimport { Header } from './Header';\nimport { Main } from './Main';\n\nimport style from 'styles/App.module.css';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\nexport const App: FC = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAuthUserData());\n  }, []);\n\n  return (\n    <div className={style.container}>\n      <Loader />\n      <ErrorAll />\n      <Header />\n      <Main />\n    </div>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ACTIONS_TYPE_APP, AppActionType } from '../actions/app-actions';\n\nconst initialRecoveryState = {\n  error: false,\n  textError: '',\n  isFetching: false,\n};\n\ntype InitialRecoveryStateType = typeof initialRecoveryState;\n\nexport const appReducer = (\n  state: InitialRecoveryStateType = initialRecoveryState,\n  action: AppActionType,\n): InitialRecoveryStateType => {\n  switch (action.type) {\n    case ACTIONS_TYPE_APP.SET_ERROR_MESSAGE:\n      return { ...state, error: action.error, textError: action.textError };\n    case ACTIONS_TYPE_APP.SET_IS_FETHING:\n      return { ...state, isFetching: action.isFetching };\n    default:\n      return state;\n  }\n};\n","import { ACTIONS_TYPE_PASSWORD, PasswordActionType } from '../actions/password-actions';\n\nconst initialPasswordState = {\n  sendMessageSuccess: false,\n  passwordRename: false,\n};\ntype InitialPasswordStateType = typeof initialPasswordState;\n\nexport const passwordReducer = (\n  state: InitialPasswordStateType = initialPasswordState,\n  action: PasswordActionType,\n): InitialPasswordStateType => {\n  switch (action.type) {\n    case ACTIONS_TYPE_PASSWORD.SEND_MESSAGE_ON_MAIL:\n      return {\n        ...state,\n        sendMessageSuccess: action.sendMessageSuccess,\n      };\n    case ACTIONS_TYPE_PASSWORD.RENAME_PASSWORD:\n      return {\n        ...state,\n        passwordRename: action.passwordRename,\n      };\n    default:\n      return state;\n  }\n};\n","import { ACTIONS_TYPE, RegisterActionType } from '../actions/register-actions';\n\nconst initialRegisterState = {\n  signUpStatus: false,\n};\n\ntype InitialRegisterStateType = typeof initialRegisterState;\n\nexport const registerReducer = (\n  state: InitialRegisterStateType = initialRegisterState,\n  action: RegisterActionType,\n): InitialRegisterStateType => {\n  switch (action.type) {\n    case ACTIONS_TYPE.SET_REGISTER_STATUS:\n      return { ...state, signUpStatus: action.registerStatus };\n    default:\n      return state;\n  }\n};\n","import { applyMiddleware, combineReducers, createStore, compose } from 'redux';\nimport thunk, { ThunkAction } from 'redux-thunk';\n\nimport { AppActionType } from './actions/app-actions';\nimport { AuthActionsType } from './actions/auth-actions';\nimport { PasswordActionType } from './actions/password-actions';\nimport { RegisterActionType } from './actions/register-actions';\nimport { appReducer } from './reducers/app-reducer';\nimport { authReducer } from './reducers/auth-reducer';\nimport { passwordReducer } from './reducers/password-reducer';\nimport { profileReducer } from './reducers/profile-reducer';\nimport { registerReducer } from './reducers/register-reducer';\n\nconst rootReducer = combineReducers({\n  profile: profileReducer,\n  password: passwordReducer,\n  register: registerReducer,\n  auth: authReducer,\n  app: appReducer,\n});\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\nexport type AppRootState = ReturnType<typeof rootReducer>;\nexport type AppActionsType =\n  | AuthActionsType\n  | RegisterActionType\n  | PasswordActionType\n  | AppActionType;\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppRootState,\n  unknown,\n  AppActionsType\n>;\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport 'styles/index.css';\n\nimport { App } from './a1-main/m1-ui/components/main/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { store } from 'a1-main/m2-bll/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorText\":\"Login_errorText__1QtID\",\"forgotblock\":\"Login_forgotblock__V1QyD\",\"forgotPassword\":\"Login_forgotPassword__2soQw\",\"SignUpBlock\":\"Login_SignUpBlock__2s8pf\"};"],"sourceRoot":""}